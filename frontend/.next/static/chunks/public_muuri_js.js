/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["public_muuri_js"],{

/***/ "./public/muuri.js":
/*!*************************!*\
  !*** ./public/muuri.js ***!
  \*************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n* Muuri v0.9.5\n* https://muuri.dev/\n* Copyright (c) 2015-present, Haltu Oy\n* Released under the MIT license\n* https://github.com/haltu/muuri/blob/master/LICENSE.md\n* @license MIT\n*\n* Muuri Packer\n* Copyright (c) 2016-present, Niklas Rämö <inramo@gmail.com>\n* @license MIT\n*\n* Muuri Ticker / Muuri Emitter / Muuri Dragger\n* Copyright (c) 2018-present, Niklas Rämö <inramo@gmail.com>\n* @license MIT\n*\n* Muuri AutoScroller\n* Copyright (c) 2019-present, Niklas Rämö <inramo@gmail.com>\n* @license MIT\n*/\n!function (t, e) {\n   true ? module.exports = e() : 0;\n}(this, function () {\n  \"use strict\";\n\n  var t = {},\n      e = \"function\" == typeof Map ? new Map() : null,\n      i = \"swap\",\n      s = \"move\",\n      n = \"layoutStart\",\n      o = \"layoutEnd\",\n      r = \"layoutAbort\",\n      h = \"remove\",\n      a = \"hideStart\",\n      _ = \"filter\",\n      l = \"sort\",\n      d = \"move\",\n      u = \"send\",\n      c = \"beforeSend\",\n      f = \"receive\",\n      p = \"beforeReceive\",\n      m = \"dragReleaseEnd\",\n      g = (\"ontouchstart\" in window),\n      v = !!window.PointerEvent,\n      y = !!window.navigator.msPointerEnabled;\n\n  function S() {\n    this._events = {}, this._queue = [], this._counter = 0, this._clearOnEmit = !1;\n  }\n\n  S.prototype.on = function (t, e) {\n    if (!this._events || !t || !e) return this;\n    var i = this._events[t];\n    return i || (i = this._events[t] = []), i.push(e), this;\n  }, S.prototype.off = function (t, e) {\n    if (!this._events || !t || !e) return this;\n    var i,\n        s = this._events[t];\n    if (!s || !s.length) return this;\n\n    for (; -1 !== (i = s.indexOf(e));) {\n      s.splice(i, 1);\n    }\n\n    return this;\n  }, S.prototype.clear = function (t) {\n    if (!this._events || !t) return this;\n    var e = this._events[t];\n    return e && (e.length = 0, delete this._events[t]), this;\n  }, S.prototype.emit = function (t) {\n    if (!this._events || !t) return this._clearOnEmit = !1, this;\n    var e = this._events[t];\n    if (!e || !e.length) return this._clearOnEmit = !1, this;\n    var i,\n        s = this._queue,\n        n = s.length,\n        o = arguments.length - 1;\n    o > 3 && ((i = []).push.apply(i, arguments), i.shift()), s.push.apply(s, e), this._clearOnEmit && (e.length = 0, this._clearOnEmit = !1), ++this._counter;\n\n    for (var r = n, h = s.length; r < h; r++) {\n      if (0 === o ? s[r]() : 1 === o ? s[r](arguments[1]) : 2 === o ? s[r](arguments[1], arguments[2]) : 3 === o ? s[r](arguments[1], arguments[2], arguments[3]) : s[r].apply(null, i), !this._events) return this;\n    }\n\n    return --this._counter, this._counter || (s.length = 0), this;\n  }, S.prototype.burst = function () {\n    return this._events ? (this._clearOnEmit = !0, this.emit.apply(this, arguments), this) : this;\n  }, S.prototype.countListeners = function (t) {\n    if (!this._events) return 0;\n    var e = this._events[t];\n    return e ? e.length : 0;\n  }, S.prototype.destroy = function () {\n    return this._events ? (this._queue.length = this._counter = 0, this._events = null, this) : this;\n  };\n  var w = v ? \"pointerout\" : y ? \"MSPointerOut\" : \"\";\n\n  function D(t) {\n    w && (this._dragger = t, this._timeout = null, this._outEvent = null, this._isActive = !1, this._addBehaviour = this._addBehaviour.bind(this), this._removeBehaviour = this._removeBehaviour.bind(this), this._onTimeout = this._onTimeout.bind(this), this._resetData = this._resetData.bind(this), this._onStart = this._onStart.bind(this), this._onOut = this._onOut.bind(this), this._dragger.on(\"start\", this._onStart));\n  }\n\n  D.prototype._addBehaviour = function () {\n    this._isActive || (this._isActive = !0, this._dragger.on(\"move\", this._resetData), this._dragger.on(\"cancel\", this._removeBehaviour), this._dragger.on(\"end\", this._removeBehaviour), window.addEventListener(w, this._onOut));\n  }, D.prototype._removeBehaviour = function () {\n    this._isActive && (this._dragger.off(\"move\", this._resetData), this._dragger.off(\"cancel\", this._removeBehaviour), this._dragger.off(\"end\", this._removeBehaviour), window.removeEventListener(w, this._onOut), this._resetData(), this._isActive = !1);\n  }, D.prototype._resetData = function () {\n    window.clearTimeout(this._timeout), this._timeout = null, this._outEvent = null;\n  }, D.prototype._onStart = function (t) {\n    \"mouse\" !== t.pointerType && this._addBehaviour();\n  }, D.prototype._onOut = function (t) {\n    this._dragger._getTrackedTouch(t) && (this._resetData(), this._outEvent = t, this._timeout = window.setTimeout(this._onTimeout, 100));\n  }, D.prototype._onTimeout = function () {\n    var t = this._outEvent;\n    this._resetData(), this._dragger.isActive() && this._dragger._onCancel(t);\n  }, D.prototype.destroy = function () {\n    w && (this._dragger.off(\"start\", this._onStart), this._removeBehaviour());\n  };\n  var b = [\"\", \"webkit\", \"moz\", \"ms\", \"o\", \"Webkit\", \"Moz\", \"MS\", \"O\"],\n      A = {};\n\n  function E(t, e) {\n    var i = A[e] || \"\";\n    if (i) return i;\n\n    for (var s = e[0].toUpperCase() + e.slice(1), n = 0; n < b.length;) {\n      if ((i = b[n] ? b[n] + s : e) in t) return A[e] = i, i;\n      ++n;\n    }\n\n    return \"\";\n  }\n\n  function T() {\n    var t = !1;\n\n    try {\n      var e = Object.defineProperty({}, \"passive\", {\n        get: function get() {\n          t = !0;\n        }\n      });\n      window.addEventListener(\"testPassive\", null, e), window.removeEventListener(\"testPassive\", null, e);\n    } catch (t) {}\n\n    return t;\n  }\n\n  var x = window.navigator.userAgent.toLowerCase(),\n      k = x.indexOf(\"edge\") > -1,\n      L = x.indexOf(\"trident\") > -1,\n      R = x.indexOf(\"firefox\") > -1,\n      I = x.indexOf(\"android\") > -1,\n      C = !!T() && {\n    passive: !0\n  },\n      M = \"touchAction\",\n      P = E(document.documentElement.style, M);\n\n  function X(t, e) {\n    this._element = t, this._emitter = new S(), this._isDestroyed = !1, this._cssProps = {}, this._touchAction = \"\", this._isActive = !1, this._pointerId = null, this._startTime = 0, this._startX = 0, this._startY = 0, this._currentX = 0, this._currentY = 0, this._onStart = this._onStart.bind(this), this._onMove = this._onMove.bind(this), this._onCancel = this._onCancel.bind(this), this._onEnd = this._onEnd.bind(this), this._edgeHack = null, (k || L) && (v || y) && (this._edgeHack = new D(this)), this.setCssProps(e), this._touchAction || this.setTouchAction(\"auto\"), t.addEventListener(\"dragstart\", X._preventDefault, !1), t.addEventListener(X._inputEvents.start, this._onStart, C);\n  }\n\n  X._pointerEvents = {\n    start: \"pointerdown\",\n    move: \"pointermove\",\n    cancel: \"pointercancel\",\n    end: \"pointerup\"\n  }, X._msPointerEvents = {\n    start: \"MSPointerDown\",\n    move: \"MSPointerMove\",\n    cancel: \"MSPointerCancel\",\n    end: \"MSPointerUp\"\n  }, X._touchEvents = {\n    start: \"touchstart\",\n    move: \"touchmove\",\n    cancel: \"touchcancel\",\n    end: \"touchend\"\n  }, X._mouseEvents = {\n    start: \"mousedown\",\n    move: \"mousemove\",\n    cancel: \"\",\n    end: \"mouseup\"\n  }, X._inputEvents = g ? X._touchEvents : v ? X._pointerEvents : y ? X._msPointerEvents : X._mouseEvents, X._emitter = new S(), X._emitterEvents = {\n    start: \"start\",\n    move: \"move\",\n    end: \"end\",\n    cancel: \"cancel\"\n  }, X._activeInstances = [], X._preventDefault = function (t) {\n    t.preventDefault && !1 !== t.cancelable && t.preventDefault();\n  }, X._activateInstance = function (t) {\n    X._activeInstances.indexOf(t) > -1 || (X._activeInstances.push(t), X._emitter.on(X._emitterEvents.move, t._onMove), X._emitter.on(X._emitterEvents.cancel, t._onCancel), X._emitter.on(X._emitterEvents.end, t._onEnd), 1 === X._activeInstances.length && X._bindListeners());\n  }, X._deactivateInstance = function (t) {\n    var e = X._activeInstances.indexOf(t);\n\n    -1 !== e && (X._activeInstances.splice(e, 1), X._emitter.off(X._emitterEvents.move, t._onMove), X._emitter.off(X._emitterEvents.cancel, t._onCancel), X._emitter.off(X._emitterEvents.end, t._onEnd), X._activeInstances.length || X._unbindListeners());\n  }, X._bindListeners = function () {\n    window.addEventListener(X._inputEvents.move, X._onMove, C), window.addEventListener(X._inputEvents.end, X._onEnd, C), X._inputEvents.cancel && window.addEventListener(X._inputEvents.cancel, X._onCancel, C);\n  }, X._unbindListeners = function () {\n    window.removeEventListener(X._inputEvents.move, X._onMove, C), window.removeEventListener(X._inputEvents.end, X._onEnd, C), X._inputEvents.cancel && window.removeEventListener(X._inputEvents.cancel, X._onCancel, C);\n  }, X._getEventPointerId = function (t) {\n    return \"number\" == typeof t.pointerId ? t.pointerId : t.changedTouches ? t.changedTouches[0] ? t.changedTouches[0].identifier : null : 1;\n  }, X._getTouchById = function (t, e) {\n    if (\"number\" == typeof t.pointerId) return t.pointerId === e ? t : null;\n\n    if (t.changedTouches) {\n      for (var i = 0; i < t.changedTouches.length; i++) {\n        if (t.changedTouches[i].identifier === e) return t.changedTouches[i];\n      }\n\n      return null;\n    }\n\n    return t;\n  }, X._onMove = function (t) {\n    X._emitter.emit(X._emitterEvents.move, t);\n  }, X._onCancel = function (t) {\n    X._emitter.emit(X._emitterEvents.cancel, t);\n  }, X._onEnd = function (t) {\n    X._emitter.emit(X._emitterEvents.end, t);\n  }, X.prototype._reset = function () {\n    this._pointerId = null, this._startTime = 0, this._startX = 0, this._startY = 0, this._currentX = 0, this._currentY = 0, this._isActive = !1, X._deactivateInstance(this);\n  }, X.prototype._createEvent = function (t, e) {\n    var i = this._getTrackedTouch(e);\n\n    return {\n      type: t,\n      srcEvent: e,\n      distance: this.getDistance(),\n      deltaX: this.getDeltaX(),\n      deltaY: this.getDeltaY(),\n      deltaTime: t === X._emitterEvents.start ? 0 : this.getDeltaTime(),\n      isFirst: t === X._emitterEvents.start,\n      isFinal: t === X._emitterEvents.end || t === X._emitterEvents.cancel,\n      pointerType: e.pointerType || (e.touches ? \"touch\" : \"mouse\"),\n      identifier: this._pointerId,\n      screenX: i.screenX,\n      screenY: i.screenY,\n      clientX: i.clientX,\n      clientY: i.clientY,\n      pageX: i.pageX,\n      pageY: i.pageY,\n      target: i.target\n    };\n  }, X.prototype._emit = function (t, e) {\n    this._emitter.emit(t, this._createEvent(t, e));\n  }, X.prototype._getTrackedTouch = function (t) {\n    return null === this._pointerId ? null : X._getTouchById(t, this._pointerId);\n  }, X.prototype._onStart = function (t) {\n    if (!this._isDestroyed && null === this._pointerId && (this._pointerId = X._getEventPointerId(t), null !== this._pointerId)) {\n      var e = this._getTrackedTouch(t);\n\n      this._startX = this._currentX = e.clientX, this._startY = this._currentY = e.clientY, this._startTime = Date.now(), this._isActive = !0, this._emit(X._emitterEvents.start, t), this._isActive && X._activateInstance(this);\n    }\n  }, X.prototype._onMove = function (t) {\n    var e = this._getTrackedTouch(t);\n\n    e && (this._currentX = e.clientX, this._currentY = e.clientY, this._emit(X._emitterEvents.move, t));\n  }, X.prototype._onCancel = function (t) {\n    this._getTrackedTouch(t) && (this._emit(X._emitterEvents.cancel, t), this._reset());\n  }, X.prototype._onEnd = function (t) {\n    this._getTrackedTouch(t) && (this._emit(X._emitterEvents.end, t), this._reset());\n  }, X.prototype.isActive = function () {\n    return this._isActive;\n  }, X.prototype.setTouchAction = function (t) {\n    this._touchAction = t, P && (this._cssProps[P] = \"\", this._element.style[P] = t), g && (this._element.removeEventListener(X._touchEvents.start, X._preventDefault, !0), (this._element.style[P] !== t || R && I) && this._element.addEventListener(X._touchEvents.start, X._preventDefault, !0));\n  }, X.prototype.setCssProps = function (t) {\n    if (t) {\n      var e,\n          i,\n          s = this._cssProps,\n          n = this._element;\n\n      for (e in s) {\n        n.style[e] = s[e], delete s[e];\n      }\n\n      for (e in t) {\n        t[e] && (e !== M ? (i = E(n.style, e)) && (s[i] = \"\", n.style[i] = t[e]) : this.setTouchAction(t[e]));\n      }\n    }\n  }, X.prototype.getDeltaX = function () {\n    return this._currentX - this._startX;\n  }, X.prototype.getDeltaY = function () {\n    return this._currentY - this._startY;\n  }, X.prototype.getDistance = function () {\n    var t = this.getDeltaX(),\n        e = this.getDeltaY();\n    return Math.sqrt(t * t + e * e);\n  }, X.prototype.getDeltaTime = function () {\n    return this._startTime ? Date.now() - this._startTime : 0;\n  }, X.prototype.on = function (t, e) {\n    this._emitter.on(t, e);\n  }, X.prototype.off = function (t, e) {\n    this._emitter.off(t, e);\n  }, X.prototype.destroy = function () {\n    if (!this._isDestroyed) {\n      var t = this._element;\n\n      for (var e in this._edgeHack && this._edgeHack.destroy(), this._reset(), this._emitter.destroy(), t.removeEventListener(X._inputEvents.start, this._onStart, C), t.removeEventListener(\"dragstart\", X._preventDefault, !1), t.removeEventListener(X._touchEvents.start, X._preventDefault, !0), this._cssProps) {\n        t.style[e] = this._cssProps[e], delete this._cssProps[e];\n      }\n\n      this._element = null, this._isDestroyed = !0;\n    }\n  };\n\n  var Y = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\n    return this.setTimeout(function () {\n      t(Date.now());\n    }, 16.666666666666668);\n  }).bind(window);\n\n  function q(t) {\n    this._nextStep = null, this._lanes = [], this._stepQueue = [], this._stepCallbacks = {}, this._step = this._step.bind(this);\n\n    for (var e = 0; e < t; e++) {\n      this._lanes.push(new O());\n    }\n  }\n\n  function O() {\n    this.queue = [], this.indices = {}, this.callbacks = {};\n  }\n\n  q.prototype._step = function (t) {\n    var e,\n        i,\n        s,\n        n,\n        o,\n        r,\n        h = this._lanes,\n        a = this._stepQueue,\n        _ = this._stepCallbacks;\n\n    for (this._nextStep = null, e = 0; e < h.length; e++) {\n      for (n = h[e].queue, o = h[e].callbacks, r = h[e].indices, i = 0; i < n.length; i++) {\n        (s = n[i]) && (a.push(s), _[s] = o[s], delete o[s], delete r[s]);\n      }\n\n      n.length = 0;\n    }\n\n    for (e = 0; e < a.length; e++) {\n      _[s = a[e]] && _[s](t), delete _[s];\n    }\n\n    a.length = 0;\n  }, q.prototype.add = function (t, e, i) {\n    this._lanes[t].add(e, i), this._nextStep || (this._nextStep = Y(this._step));\n  }, q.prototype.remove = function (t, e) {\n    this._lanes[t].remove(e);\n  }, O.prototype.add = function (t, e) {\n    var i = this.indices[t];\n    void 0 !== i && (this.queue[i] = void 0), this.queue.push(t), this.callbacks[t] = e, this.indices[t] = this.queue.length - 1;\n  }, O.prototype.remove = function (t) {\n    var e = this.indices[t];\n    void 0 !== e && (this.queue[e] = void 0, delete this.callbacks[t], delete this.indices[t]);\n  };\n  var H = \"layoutRead\",\n      G = \"layoutWrite\",\n      W = \"visibilityRead\",\n      B = \"visibilityWrite\",\n      N = \"dragStartRead\",\n      F = \"dragStartWrite\",\n      z = \"dragMoveRead\",\n      V = \"dragMoveWrite\",\n      j = \"dragScrollRead\",\n      Q = \"dragScrollWrite\",\n      U = \"dragSortRead\",\n      Z = \"placeholderLayoutRead\",\n      J = \"placeholderLayoutWrite\",\n      $ = \"placeholderResizeWrite\",\n      K = \"autoScrollRead\",\n      tt = \"autoScrollWrite\",\n      et = \"debounceRead\",\n      it = new q(3);\n\n  function st(t) {\n    it.remove(0, H + t), it.remove(2, G + t);\n  }\n\n  function nt(t) {\n    it.remove(0, W + t), it.remove(2, B + t);\n  }\n\n  function ot(t) {\n    it.remove(0, N + t), it.remove(2, F + t);\n  }\n\n  function rt(t) {\n    it.remove(0, z + t), it.remove(2, V + t);\n  }\n\n  function ht(t) {\n    it.remove(0, j + t), it.remove(2, Q + t);\n  }\n\n  function at(t, e) {\n    it.add(1, U + t, e);\n  }\n\n  function _t(t) {\n    it.remove(0, Z + t), it.remove(2, J + t);\n  }\n\n  function lt(t, e) {\n    it.add(0, K, t), it.add(2, tt, e);\n  }\n\n  function dt(t) {\n    return \"function\" == typeof t;\n  }\n\n  var ut = \"function\" == typeof WeakMap ? new WeakMap() : null;\n\n  function ct(t, e) {\n    var i = ut && ut.get(t);\n    return i || (i = window.getComputedStyle(t, null), ut && ut.set(t, i)), i.getPropertyValue(e);\n  }\n\n  function ft(t, e) {\n    return parseFloat(ct(t, e)) || 0;\n  }\n\n  var pt,\n      mt = document.documentElement,\n      gt = document.body,\n      vt = {\n    value: 0,\n    offset: 0\n  };\n\n  function yt(t) {\n    return t === window || t === mt || t === gt ? window : t;\n  }\n\n  function St(t) {\n    return t === window ? t.pageXOffset : t.scrollLeft;\n  }\n\n  function wt(t) {\n    return t === window ? t.pageYOffset : t.scrollTop;\n  }\n\n  function Dt(t) {\n    return t === window ? mt.scrollWidth - mt.clientWidth : t.scrollWidth - t.clientWidth;\n  }\n\n  function bt(t) {\n    return t === window ? mt.scrollHeight - mt.clientHeight : t.scrollHeight - t.clientHeight;\n  }\n\n  function At(t, e) {\n    if (e = e || {}, t === window) e.width = mt.clientWidth, e.height = mt.clientHeight, e.left = 0, e.right = e.width, e.top = 0, e.bottom = e.height;else {\n      var i = t.getBoundingClientRect(),\n          s = t.clientLeft || ft(t, \"border-left-width\"),\n          n = t.clientTop || ft(t, \"border-top-width\");\n      e.width = t.clientWidth, e.height = t.clientHeight, e.left = i.left + s, e.right = e.left + e.width, e.top = i.top + n, e.bottom = e.top + e.height;\n    }\n    return e;\n  }\n\n  function Et(t) {\n    return t._drag._getGrid()._settings.dragAutoScroll;\n  }\n\n  function Tt(t) {\n    if (t._drag && t._isActive) {\n      var e = t._drag;\n      e._scrollDiffX = e._scrollDiffY = 0, t._setTranslate(e._left, e._top);\n    }\n  }\n\n  function xt(t, e, i, s) {\n    return vt.value = Math.min(s / 2, t), vt.offset = Math.max(0, i + 2 * vt.value + s * e - s) / 2, vt;\n  }\n\n  function kt() {\n    this.reset();\n  }\n\n  function Lt() {\n    this.element = null, this.requestX = null, this.requestY = null, this.scrollLeft = 0, this.scrollTop = 0;\n  }\n\n  function Rt(t, e) {\n    this.pool = [], this.createItem = t, this.releaseItem = e;\n  }\n\n  function It(t, e) {\n    var i = function (t, e) {\n      return function (t, e) {\n        return !(t.left + t.width <= e.left || e.left + e.width <= t.left || t.top + t.height <= e.top || e.top + e.height <= t.top);\n      }(t, e) ? (Math.min(t.left + t.width, e.left + e.width) - Math.max(t.left, e.left)) * (Math.min(t.top + t.height, e.top + e.height) - Math.max(t.top, e.top)) : 0;\n    }(t, e);\n\n    return i ? i / (Math.min(t.width, e.width) * Math.min(t.height, e.height)) * 100 : 0;\n  }\n\n  kt.prototype.reset = function () {\n    this.isActive && this.onStop(), this.item = null, this.element = null, this.isActive = !1, this.isEnding = !1, this.direction = null, this.value = null, this.maxValue = 0, this.threshold = 0, this.distance = 0, this.speed = 0, this.duration = 0, this.action = null;\n  }, kt.prototype.hasReachedEnd = function () {\n    return 4 & this.direction ? this.value >= this.maxValue : this.value <= 0;\n  }, kt.prototype.computeCurrentScrollValue = function () {\n    return null === this.value ? 1 & this.direction ? St(this.element) : wt(this.element) : Math.max(0, Math.min(this.value, this.maxValue));\n  }, kt.prototype.computeNextScrollValue = function (t) {\n    var e = this.speed * (t / 1e3),\n        i = 4 & this.direction ? this.value + e : this.value - e;\n    return Math.max(0, Math.min(i, this.maxValue));\n  }, kt.prototype.computeSpeed = (pt = {\n    direction: null,\n    threshold: 0,\n    distance: 0,\n    value: 0,\n    maxValue: 0,\n    deltaTime: 0,\n    duration: 0,\n    isEnding: !1\n  }, function (t) {\n    var e = this.item,\n        i = Et(e).speed;\n    return dt(i) ? (pt.direction = this.direction, pt.threshold = this.threshold, pt.distance = this.distance, pt.value = this.value, pt.maxValue = this.maxValue, pt.duration = this.duration, pt.speed = this.speed, pt.deltaTime = t, pt.isEnding = this.isEnding, i(e, this.element, pt)) : i;\n  }), kt.prototype.tick = function (t) {\n    return this.isActive || (this.isActive = !0, this.onStart()), this.value = this.computeCurrentScrollValue(), this.speed = this.computeSpeed(t), this.value = this.computeNextScrollValue(t), this.duration += t, this.value;\n  }, kt.prototype.onStart = function () {\n    var t = this.item,\n        e = Et(t).onStart;\n    dt(e) && e(t, this.element, this.direction);\n  }, kt.prototype.onStop = function () {\n    var t = this.item,\n        e = Et(t).onStop;\n    dt(e) && e(t, this.element, this.direction), t._drag && t._drag.sort();\n  }, Lt.prototype.reset = function () {\n    this.requestX && (this.requestX.action = null), this.requestY && (this.requestY.action = null), this.element = null, this.requestX = null, this.requestY = null, this.scrollLeft = 0, this.scrollTop = 0;\n  }, Lt.prototype.addRequest = function (t) {\n    1 & t.direction ? (this.removeRequest(this.requestX), this.requestX = t) : (this.removeRequest(this.requestY), this.requestY = t), t.action = this;\n  }, Lt.prototype.removeRequest = function (t) {\n    t && (this.requestX === t ? (this.requestX = null, t.action = null) : this.requestY === t && (this.requestY = null, t.action = null));\n  }, Lt.prototype.computeScrollValues = function () {\n    this.scrollLeft = this.requestX ? this.requestX.value : St(this.element), this.scrollTop = this.requestY ? this.requestY.value : wt(this.element);\n  }, Lt.prototype.scroll = function () {\n    var t = this.element;\n    t && (t.scrollTo ? t.scrollTo(this.scrollLeft, this.scrollTop) : (t.scrollLeft = this.scrollLeft, t.scrollTop = this.scrollTop));\n  }, Rt.prototype.pick = function () {\n    return this.pool.pop() || this.createItem();\n  }, Rt.prototype.release = function (t) {\n    this.releaseItem(t), -1 === this.pool.indexOf(t) && this.pool.push(t);\n  }, Rt.prototype.reset = function () {\n    this.pool.length = 0;\n  };\n  var Ct = {\n    width: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  },\n      Mt = {\n    width: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  };\n\n  function Pt() {\n    this._isDestroyed = !1, this._isTicking = !1, this._tickTime = 0, this._tickDeltaTime = 0, this._items = [], this._actions = [], this._requests = {}, this._requests[1] = {}, this._requests[2] = {}, this._requestOverlapCheck = {}, this._dragPositions = {}, this._dragDirections = {}, this._overlapCheckInterval = 150, this._requestPool = new Rt(function () {\n      return new kt();\n    }, function (t) {\n      t.reset();\n    }), this._actionPool = new Rt(function () {\n      return new Lt();\n    }, function (t) {\n      t.reset();\n    }), this._readTick = this._readTick.bind(this), this._writeTick = this._writeTick.bind(this);\n  }\n\n  Pt.AXIS_X = 1, Pt.AXIS_Y = 2, Pt.FORWARD = 4, Pt.BACKWARD = 8, Pt.LEFT = 9, Pt.RIGHT = 5, Pt.UP = 10, Pt.DOWN = 6, Pt.smoothSpeed = function (t, e, i) {\n    return function (s, n, o) {\n      var r = 0;\n      if (!o.isEnding) if (o.threshold > 0) {\n        var h = o.threshold - Math.max(0, o.distance);\n        r = t / o.threshold * h;\n      } else r = t;\n      var a = o.speed,\n          _ = r;\n      return a === r ? _ : a < r ? (_ = a + e * (o.deltaTime / 1e3), Math.min(r, _)) : (_ = a - i * (o.deltaTime / 1e3), Math.max(r, _));\n    };\n  }, Pt.pointerHandle = function (t) {\n    var e = {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0\n    },\n        i = t || 1;\n    return function (t, s, n, o, r, h, a) {\n      return e.left = h - .5 * i, e.top = a - .5 * i, e.width = i, e.height = i, e;\n    };\n  }, Pt.prototype._readTick = function (t) {\n    this._isDestroyed || (t && this._tickTime ? (this._tickDeltaTime = t - this._tickTime, this._tickTime = t, this._updateRequests(), this._updateActions()) : (this._tickTime = t, this._tickDeltaTime = 0));\n  }, Pt.prototype._writeTick = function () {\n    this._isDestroyed || (this._applyActions(), lt(this._readTick, this._writeTick));\n  }, Pt.prototype._startTicking = function () {\n    this._isTicking = !0, lt(this._readTick, this._writeTick);\n  }, Pt.prototype._stopTicking = function () {\n    this._isTicking = !1, this._tickTime = 0, this._tickDeltaTime = 0, it.remove(0, K), it.remove(2, tt);\n  }, Pt.prototype._getItemHandleRect = function (t, e, i) {\n    var s = t._drag;\n\n    if (e) {\n      var n = s._dragMoveEvent || s._dragStartEvent,\n          o = e(t, s._clientX, s._clientY, t._width, t._height, n.clientX, n.clientY);\n      i.left = o.left, i.top = o.top, i.width = o.width, i.height = o.height;\n    } else i.left = s._clientX, i.top = s._clientY, i.width = t._width, i.height = t._height;\n\n    return i.right = i.left + i.width, i.bottom = i.top + i.height, i;\n  }, Pt.prototype._requestItemScroll = function (t, e, i, s, n, o, r) {\n    var h = this._requests[e],\n        a = h[t._id];\n    a ? a.element === i && a.direction === s || a.reset() : a = this._requestPool.pick(), a.item = t, a.element = i, a.direction = s, a.threshold = n, a.distance = o, a.maxValue = r, h[t._id] = a;\n  }, Pt.prototype._cancelItemScroll = function (t, e) {\n    var i = this._requests[e],\n        s = i[t._id];\n    s && (s.action && s.action.removeRequest(s), this._requestPool.release(s), delete i[t._id]);\n  }, Pt.prototype._checkItemOverlap = function (t, e, i) {\n    var s = Et(t),\n        n = dt(s.targets) ? s.targets(t) : s.targets,\n        o = s.threshold,\n        r = s.safeZone;\n    if (!n || !n.length) return e && this._cancelItemScroll(t, 1), void (i && this._cancelItemScroll(t, 2));\n    var h = this._dragDirections[t._id],\n        a = h[0],\n        _ = h[1];\n    if (!a && !_) return e && this._cancelItemScroll(t, 1), void (i && this._cancelItemScroll(t, 2));\n\n    for (var l = this._getItemHandleRect(t, s.handle, Ct), d = Mt, u = null, c = null, f = !0, p = !0, m = 0, g = 0, v = null, y = null, S = 0, w = 0, D = 0, b = null, A = -1 / 0, E = 0, T = 0, x = null, k = 0, L = 0, R = null, I = -1 / 0, C = 0, M = 0, P = null, X = 0, Y = 0, q = 0; q < n.length; q++) {\n      u = n[q], f = e && a && 2 !== u.axis, p = i && _ && 1 !== u.axis, g = u.priority || 0, (!f || g < A) && (!p || g < I) || (c = yt(u.element || u), w = f ? Dt(c) : -1, D = p ? bt(c) : -1, (w || D) && ((m = It(l, d = At(c, d))) <= 0 || (f && g >= A && w > 0 && (g > A || m > T) && (y = null, v = xt(\"number\" == typeof u.threshold ? u.threshold : o, r, l.width, d.width), 5 === a ? (S = d.right + v.offset - l.right) <= v.value && St(c) < w && (y = 5) : 9 === a && (S = l.left - (d.left - v.offset)) <= v.value && St(c) > 0 && (y = 9), null !== y && (b = c, A = g, E = v.value, T = m, x = y, k = S, L = w)), p && g >= I && D > 0 && (g > I || m > M) && (y = null, v = xt(\"number\" == typeof u.threshold ? u.threshold : o, r, l.height, d.height), 6 === _ ? (S = d.bottom + v.offset - l.bottom) <= v.value && wt(c) < D && (y = 6) : 10 === _ && (S = l.top - (d.top - v.offset)) <= v.value && wt(c) > 0 && (y = 10), null !== y && (R = c, I = g, C = v.value, M = m, P = y, X = S, Y = D)))));\n    }\n\n    e && (b ? this._requestItemScroll(t, 1, b, x, E, k, L) : this._cancelItemScroll(t, 1)), i && (R ? this._requestItemScroll(t, 2, R, P, C, X, Y) : this._cancelItemScroll(t, 2));\n  }, Pt.prototype._updateScrollRequest = function (t) {\n    for (var e = t.item, i = Et(e), s = dt(i.targets) ? i.targets(e) : i.targets, n = s && s.length || 0, o = i.threshold, r = i.safeZone, h = this._getItemHandleRect(e, i.handle, Ct), a = Mt, _ = null, l = null, d = !1, u = null, c = null, f = null, p = null, m = null, g = 0; g < n; g++) {\n      if ((l = yt((_ = s[g]).element || _)) === t.element) {\n        if (d = !!(1 & t.direction)) {\n          if (2 === _.axis) continue;\n        } else if (1 === _.axis) continue;\n\n        if ((p = d ? Dt(l) : bt(l)) <= 0) break;\n        if (It(h, a = At(l, a)) <= 0) break;\n        if (u = xt(\"number\" == typeof _.threshold ? _.threshold : o, r, d ? h.width : h.height, d ? a.width : a.height), (c = 9 === t.direction ? h.left - (a.left - u.offset) : 5 === t.direction ? a.right + u.offset - h.right : 10 === t.direction ? h.top - (a.top - u.offset) : a.bottom + u.offset - h.bottom) > u.value) break;\n        if (f = d ? St(l) : wt(l), m = 4 & t.direction ? f >= p : f <= 0) break;\n        return t.maxValue = p, t.threshold = u.value, t.distance = c, t.isEnding = !1, !0;\n      }\n    }\n\n    return !0 === i.smoothStop && t.speed > 0 ? (null === m && (m = t.hasReachedEnd()), t.isEnding = !m) : t.isEnding = !1, t.isEnding;\n  }, Pt.prototype._updateRequests = function () {\n    for (var t, e, i, s, n, o, r, h = this._items, a = this._requests[1], _ = this._requests[2], l = 0; l < h.length; l++) {\n      t = h[l], n = (s = this._requestOverlapCheck[t._id]) > 0 && this._tickTime - s > this._overlapCheckInterval, o = !0, (e = a[t._id]) && e.isActive && (o = !this._updateScrollRequest(e)) && (n = !0, this._cancelItemScroll(t, 1)), r = !0, (i = _[t._id]) && i.isActive && (r = !this._updateScrollRequest(i)) && (n = !0, this._cancelItemScroll(t, 2)), n && (this._requestOverlapCheck[t._id] = 0, this._checkItemOverlap(t, o, r));\n    }\n  }, Pt.prototype._requestAction = function (t, e) {\n    for (var i = this._actions, s = 1 === e, n = null, o = 0; o < i.length; o++) {\n      if (n = i[o], t.element === n.element) {\n        if (s ? n.requestX : n.requestY) return void this._cancelItemScroll(t.item, e);\n        break;\n      }\n\n      n = null;\n    }\n\n    n || (n = this._actionPool.pick()), n.element = t.element, n.addRequest(t), t.tick(this._tickDeltaTime), i.push(n);\n  }, Pt.prototype._updateActions = function () {\n    var t,\n        e,\n        i,\n        s,\n        n = this._items,\n        o = this._requests,\n        r = this._actions;\n\n    for (s = 0; s < n.length; s++) {\n      t = n[s]._id, e = o[1][t], i = o[2][t], e && this._requestAction(e, 1), i && this._requestAction(i, 2);\n    }\n\n    for (s = 0; s < r.length; s++) {\n      r[s].computeScrollValues();\n    }\n  }, Pt.prototype._applyActions = function () {\n    var t,\n        e = this._actions,\n        i = this._items;\n\n    if (e.length) {\n      for (t = 0; t < e.length; t++) {\n        e[t].scroll(), this._actionPool.release(e[t]);\n      }\n\n      for (e.length = 0, t = 0; t < i.length; t++) {\n        (s = i[t])._drag && s._drag._prepareScroll();\n      }\n\n      var s;\n\n      for (t = 0; t < i.length; t++) {\n        Tt(i[t]);\n      }\n    }\n  }, Pt.prototype._updateDragDirection = function (t) {\n    var e = this._dragPositions[t._id],\n        i = this._dragDirections[t._id],\n        s = t._drag._left,\n        n = t._drag._top;\n\n    if (e.length) {\n      var o = e[0],\n          r = e[1];\n      i[0] = s > o ? 5 : s < o ? 9 : i[0] || 0, i[1] = n > r ? 6 : n < r ? 10 : i[1] || 0;\n    }\n\n    e[0] = s, e[1] = n;\n  }, Pt.prototype.addItem = function (t) {\n    this._isDestroyed || -1 === this._items.indexOf(t) && (this._items.push(t), this._requestOverlapCheck[t._id] = this._tickTime, this._dragDirections[t._id] = [0, 0], this._dragPositions[t._id] = [], this._isTicking || this._startTicking());\n  }, Pt.prototype.updateItem = function (t) {\n    this._isDestroyed || this._dragDirections[t._id] && (this._updateDragDirection(t), this._requestOverlapCheck[t._id] || (this._requestOverlapCheck[t._id] = this._tickTime));\n  }, Pt.prototype.removeItem = function (t) {\n    if (!this._isDestroyed) {\n      var e = this._items.indexOf(t);\n\n      if (-1 !== e) {\n        var i = t._id;\n        this._requests[1][i] && (this._cancelItemScroll(t, 1), delete this._requests[1][i]), this._requests[2][i] && (this._cancelItemScroll(t, 2), delete this._requests[2][i]), delete this._requestOverlapCheck[i], delete this._dragPositions[i], delete this._dragDirections[i], this._items.splice(e, 1), this._isTicking && !this._items.length && this._stopTicking();\n      }\n    }\n  }, Pt.prototype.isItemScrollingX = function (t) {\n    var e = this._requests[1][t._id];\n    return !(!e || !e.isActive);\n  }, Pt.prototype.isItemScrollingY = function (t) {\n    var e = this._requests[2][t._id];\n    return !(!e || !e.isActive);\n  }, Pt.prototype.isItemScrolling = function (t) {\n    return this.isItemScrollingX(t) || this.isItemScrollingY(t);\n  }, Pt.prototype.destroy = function () {\n    if (!this._isDestroyed) {\n      for (var t = this._items.slice(0), e = 0; e < t.length; e++) {\n        this.removeItem(t[e]);\n      }\n\n      this._actions.length = 0, this._requestPool.reset(), this._actionPool.reset(), this._isDestroyed = !0;\n    }\n  };\n\n  var Xt = window.Element.prototype,\n      Yt = Xt.matches || Xt.matchesSelector || Xt.webkitMatchesSelector || Xt.mozMatchesSelector || Xt.msMatchesSelector || Xt.oMatchesSelector || function () {\n    return !1;\n  };\n\n  function qt(t, e) {\n    return Yt.call(t, e);\n  }\n\n  function Ot(t, e) {\n    e && (t.classList ? t.classList.add(e) : qt(t, \".\" + e) || (t.className += \" \" + e));\n  }\n\n  var Ht = [];\n\n  function Gt(t, e, i) {\n    var s = \"number\" == typeof i ? i : -1;\n    s < 0 && (s = t.length - s + 1), t.splice.apply(t, Ht.concat(s, 0, e)), Ht.length = 0;\n  }\n\n  function Wt(t, e, i) {\n    var s = Math.max(0, t.length - 1 + (i || 0));\n    return e > s ? s : e < 0 ? Math.max(s + e + 1, 0) : e;\n  }\n\n  function Bt(t, e, i) {\n    if (!(t.length < 2)) {\n      var s = Wt(t, e),\n          n = Wt(t, i);\n      s !== n && t.splice(n, 0, t.splice(s, 1)[0]);\n    }\n  }\n\n  function Nt(t, e, i) {\n    if (!(t.length < 2)) {\n      var s,\n          n = Wt(t, e),\n          o = Wt(t, i);\n      n !== o && (s = t[n], t[n] = t[o], t[o] = s);\n    }\n  }\n\n  var Ft = E(document.documentElement.style, \"transform\") || \"transform\",\n      zt = /([A-Z])/g,\n      Vt = /^(webkit-|moz-|ms-|o-)/,\n      jt = /^(-m-s-)/;\n\n  function Qt(t) {\n    var e = t.replace(zt, \"-$1\").toLowerCase();\n    return e = (e = e.replace(Vt, \"-$1\")).replace(jt, \"-ms-\");\n  }\n\n  var Ut = Qt(Ft);\n\n  function Zt(t) {\n    var e = ct(t, Ut);\n    if (!e || \"none\" === e) return !1;\n    var i = ct(t, \"display\");\n    return \"inline\" !== i && \"none\" !== i;\n  }\n\n  function Jt(t) {\n    for (var e = document, i = t || e; i && i !== e && \"static\" === ct(i, \"position\") && !Zt(i);) {\n      i = i.parentElement || e;\n    }\n\n    return i;\n  }\n\n  var $t = {},\n      Kt = {},\n      te = {};\n\n  function ee(t, e) {\n    var i,\n        s = e || {};\n    return s.left = 0, s.top = 0, t === document ? s : (s.left = window.pageXOffset || 0, s.top = window.pageYOffset || 0, t.self === window.self || (i = t.getBoundingClientRect(), s.left += i.left, s.top += i.top, s.left += ft(t, \"border-left-width\"), s.top += ft(t, \"border-top-width\")), s);\n  }\n\n  function ie(t, e, i) {\n    return te.left = 0, te.top = 0, t === e || i && (t = Jt(t)) === (e = Jt(e)) || (ee(t, $t), ee(e, Kt), te.left = Kt.left - $t.left, te.top = Kt.top - $t.top), te;\n  }\n\n  function se(t) {\n    return \"auto\" === t || \"scroll\" === t || \"overlay\" === t;\n  }\n\n  function ne(t) {\n    return se(ct(t, \"overflow\")) || se(ct(t, \"overflow-x\")) || se(ct(t, \"overflow-y\"));\n  }\n\n  function oe(t, e) {\n    for (e = e || []; t && t !== document;) {\n      t.getRootNode && t instanceof DocumentFragment ? t = t.getRootNode().host : (ne(t) && e.push(t), t = t.parentNode);\n    }\n\n    return e.push(window), e;\n  }\n\n  var re = {},\n      he = /^matrix3d/,\n      ae = /([^,]*,){4}/,\n      _e = /([^,]*,){12}/,\n      le = /[^,]*,/;\n\n  function de(t) {\n    re.x = 0, re.y = 0;\n    var e = ct(t, Ut);\n    if (!e || \"none\" === e) return re;\n    var i = he.test(e),\n        s = e.replace(i ? _e : ae, \"\"),\n        n = s.replace(le, \"\");\n    return re.x = parseFloat(s) || 0, re.y = parseFloat(n) || 0, re;\n  }\n\n  function ue(t, e) {\n    e && (t.classList ? t.classList.remove(e) : qt(t, \".\" + e) && (t.className = (\" \" + t.className + \" \").replace(\" \" + e + \" \", \" \").trim()));\n  }\n\n  var ce,\n      fe,\n      pe,\n      me,\n      ge = /^(iPad|iPhone|iPod)/.test(window.navigator.platform) || /^Mac/.test(window.navigator.platform) && window.navigator.maxTouchPoints > 1,\n      ve = !!T() && {\n    passive: !0\n  };\n\n  function ye(t) {\n    var e = t._element,\n        i = t.getGrid(),\n        s = i._settings;\n    this._item = t, this._gridId = i._id, this._isDestroyed = !1, this._isMigrating = !1, this._startPredicate = dt(s.dragStartPredicate) ? s.dragStartPredicate : ye.defaultStartPredicate, this._startPredicateState = 0, this._startPredicateResult = void 0, this._isSortNeeded = !1, this._sortTimer = void 0, this._blockedSortIndex = null, this._sortX1 = 0, this._sortX2 = 0, this._sortY1 = 0, this._sortY2 = 0, this._reset(), this._preStartCheck = this._preStartCheck.bind(this), this._preEndCheck = this._preEndCheck.bind(this), this._onScroll = this._onScroll.bind(this), this._prepareStart = this._prepareStart.bind(this), this._applyStart = this._applyStart.bind(this), this._prepareMove = this._prepareMove.bind(this), this._applyMove = this._applyMove.bind(this), this._prepareScroll = this._prepareScroll.bind(this), this._applyScroll = this._applyScroll.bind(this), this._handleSort = this._handleSort.bind(this), this._handleSortDelayed = this._handleSortDelayed.bind(this), this._handle = s.dragHandle && e.querySelector(s.dragHandle) || e, this._dragger = new X(this._handle, s.dragCssProps), this._dragger.on(\"start\", this._preStartCheck), this._dragger.on(\"move\", this._preStartCheck), this._dragger.on(\"cancel\", this._preEndCheck), this._dragger.on(\"end\", this._preEndCheck);\n  }\n\n  function Se(t, e) {\n    var i,\n        s,\n        n = {};\n    if (Array.isArray(e)) for (s = 0; s < e.length; s++) {\n      n[i = e[s]] = ct(t, Qt(i));\n    } else for (i in e) {\n      n[i] = ct(t, Qt(i));\n    }\n    return n;\n  }\n\n  ye.autoScroller = new Pt(), ye.defaultStartPredicate = function (t, e, i) {\n    var s = t._drag;\n    if (e.isFirst && e.srcEvent.button) return !1;\n    if (!ge && e.isFirst && !0 === e.srcEvent.isTrusted && !1 === e.srcEvent.defaultPrevented && !1 === e.srcEvent.cancelable) return !1;\n\n    if (!e.isFinal) {\n      var n = s._startPredicateData;\n\n      if (!n) {\n        var o = i || s._getGrid()._settings.dragStartPredicate || {};\n        s._startPredicateData = n = {\n          distance: Math.max(o.distance, 0) || 0,\n          delay: Math.max(o.delay, 0) || 0\n        };\n      }\n\n      return n.delay && (n.event = e, n.delayTimer || (n.delayTimer = window.setTimeout(function () {\n        n.delay = 0, s._resolveStartPredicate(n.event) && (s._forceResolveStartPredicate(n.event), s._resetStartPredicate());\n      }, n.delay))), s._resolveStartPredicate(e);\n    }\n\n    s._finishStartPredicate(e);\n  }, ye.defaultSortPredicate = (ce = {}, fe = {}, pe = {}, me = [], function (t, e) {\n    var n = t._drag,\n        o = n._getGrid(),\n        r = e && \"number\" == typeof e.threshold ? e.threshold : 50,\n        h = e && e.action === i ? i : s,\n        a = e && e.migrateAction === i ? i : s;\n\n    r = Math.min(Math.max(r, 1), 100), ce.width = t._width, ce.height = t._height, ce.left = n._clientX, ce.top = n._clientY;\n\n    var _ = function (t, e, i) {\n      var s,\n          n,\n          o,\n          r,\n          h,\n          a,\n          _,\n          l,\n          d,\n          u,\n          c = null,\n          f = e._settings.dragSort,\n          p = -1;\n\n      if (!0 === f ? (me[0] = e, n = me) : dt(f) && (n = f.call(e, t)), !n || !Array.isArray(n) || !n.length) return c;\n\n      for (u = 0; u < n.length; u++) {\n        if (!(o = n[u])._isDestroyed) {\n          for (o._updateBoundingRect(), a = Math.max(0, o._left), _ = Math.max(0, o._top), l = Math.min(window.innerWidth, o._right), d = Math.min(window.innerHeight, o._bottom), r = o._element.parentNode; r && r !== document && r !== document.documentElement && r !== document.body;) {\n            if (r.getRootNode && r instanceof DocumentFragment) r = r.getRootNode().host;else {\n              if (\"visible\" !== ct(r, \"overflow\") && (h = r.getBoundingClientRect(), a = Math.max(a, h.left), _ = Math.max(_, h.top), l = Math.min(l, h.right), d = Math.min(d, h.bottom)), \"fixed\" === ct(r, \"position\")) break;\n              r = r.parentNode;\n            }\n          }\n\n          a >= l || _ >= d || (fe.left = a, fe.top = _, fe.width = l - a, fe.height = d - _, (s = It(ce, fe)) > i && s > p && (p = s, c = o));\n        }\n      }\n\n      return me.length = 0, c;\n    }(t, o, r);\n\n    if (!_) return null;\n\n    var l,\n        d,\n        u,\n        c = t.getGrid() !== _,\n        f = 0,\n        p = 0,\n        m = 0,\n        g = -1,\n        v = !1;\n\n    for (_ === o ? (ce.left = n._gridX + t._marginLeft, ce.top = n._gridY + t._marginTop) : (_._updateBorders(1, 0, 1, 0), f = _._left + _._borderLeft, p = _._top + _._borderTop), u = 0; u < _._items.length; u++) {\n      (l = _._items[u])._isActive && l !== t && (v = !0, fe.width = l._width, fe.height = l._height, fe.left = l._left + l._marginLeft + f, fe.top = l._top + l._marginTop + p, (d = It(ce, fe)) > m && (g = u, m = d));\n    }\n\n    return c && m < r && (g = v ? g : 0, m = r), m >= r ? (pe.grid = _, pe.index = g, pe.action = c ? a : h, pe) : null;\n  }), ye.prototype.stop = function () {\n    if (this._isActive) if (this._isMigrating) this._finishMigration();else {\n      var t = this._item,\n          e = t._id;\n\n      if (ye.autoScroller.removeItem(t), ot(e), rt(e), ht(e), this._cancelSort(), this._isStarted) {\n        this._unbindScrollListeners();\n\n        var i = t._element,\n            s = this._getGrid(),\n            n = s._settings.itemDraggingClass;\n\n        i.parentNode !== s._element && (s._element.appendChild(i), t._setTranslate(this._gridX, this._gridY), n && i.clientWidth), ue(i, n);\n      }\n\n      this._reset();\n    }\n  }, ye.prototype.sort = function (t) {\n    var e = this._item;\n    this._isActive && e._isActive && this._dragMoveEvent && (!0 === t ? this._handleSort() : at(e._id, this._handleSort));\n  }, ye.prototype.destroy = function () {\n    this._isDestroyed || (this.stop(), this._dragger.destroy(), ye.autoScroller.removeItem(this._item), this._isDestroyed = !0);\n  }, ye.prototype._getGrid = function () {\n    return t[this._gridId] || null;\n  }, ye.prototype._reset = function () {\n    this._isActive = !1, this._isStarted = !1, this._container = null, this._containingBlock = null, this._dragStartEvent = null, this._dragMoveEvent = null, this._dragPrevMoveEvent = null, this._scrollEvent = null, this._scrollers = [], this._left = 0, this._top = 0, this._gridX = 0, this._gridY = 0, this._clientX = 0, this._clientY = 0, this._scrollDiffX = 0, this._scrollDiffY = 0, this._moveDiffX = 0, this._moveDiffY = 0, this._containerDiffX = 0, this._containerDiffY = 0;\n  }, ye.prototype._bindScrollListeners = function () {\n    var t,\n        e,\n        i = this._getGrid()._element,\n        s = this._container,\n        n = this._scrollers;\n\n    if (n.length = 0, oe(this._item._element.parentNode, n), s !== i) for (oe(i, t = []), e = 0; e < t.length; e++) {\n      n.indexOf(t[e]) < 0 && n.push(t[e]);\n    }\n\n    for (e = 0; e < n.length; e++) {\n      n[e].addEventListener(\"scroll\", this._onScroll, ve);\n    }\n  }, ye.prototype._unbindScrollListeners = function () {\n    var t,\n        e = this._scrollers;\n\n    for (t = 0; t < e.length; t++) {\n      e[t].removeEventListener(\"scroll\", this._onScroll, ve);\n    }\n\n    e.length = 0;\n  }, ye.prototype._resolveStartPredicate = function (t) {\n    var e = this._startPredicateData;\n    if (!(t.distance < e.distance || e.delay)) return this._resetStartPredicate(), !0;\n  }, ye.prototype._forceResolveStartPredicate = function (t) {\n    this._isDestroyed || 1 !== this._startPredicateState || (this._startPredicateState = 2, this._onStart(t));\n  }, ye.prototype._finishStartPredicate = function (t) {\n    var e = this._item._element,\n        i = Math.abs(t.deltaX) < 2 && Math.abs(t.deltaY) < 2 && t.deltaTime < 200;\n    this._resetStartPredicate(), i && function (t) {\n      if (\"a\" !== t.tagName.toLowerCase()) return;\n      var e = t.getAttribute(\"href\");\n      if (!e) return;\n      var i = t.getAttribute(\"target\");\n      i && \"_self\" !== i ? window.open(e, i) : window.location.href = e;\n    }(e);\n  }, ye.prototype._resetHeuristics = function (t, e) {\n    this._blockedSortIndex = null, this._sortX1 = this._sortX2 = t, this._sortY1 = this._sortY2 = e;\n  }, ye.prototype._checkHeuristics = function (t, e) {\n    var i = this._getGrid()._settings.dragSortHeuristics,\n        s = i.minDragDistance;\n\n    if (s <= 0) return this._blockedSortIndex = null, !0;\n    var n = t - this._sortX2,\n        o = e - this._sortY2,\n        r = s > 3 && i.minBounceBackAngle > 0;\n\n    if (r || (this._blockedSortIndex = null), Math.abs(n) > s || Math.abs(o) > s) {\n      if (r) {\n        var h = Math.atan2(n, o),\n            a = Math.atan2(this._sortX2 - this._sortX1, this._sortY2 - this._sortY1),\n            _ = Math.atan2(Math.sin(h - a), Math.cos(h - a));\n\n        Math.abs(_) > i.minBounceBackAngle && (this._blockedSortIndex = null);\n      }\n\n      return this._sortX1 = this._sortX2, this._sortY1 = this._sortY2, this._sortX2 = t, this._sortY2 = e, !0;\n    }\n\n    return !1;\n  }, ye.prototype._resetStartPredicate = function () {\n    var t = this._startPredicateData;\n    t && (t.delayTimer && (t.delayTimer = window.clearTimeout(t.delayTimer)), this._startPredicateData = null);\n  }, ye.prototype._handleSort = function () {\n    if (this._isActive) {\n      var t = this._getGrid()._settings;\n\n      if (!t.dragSort || !t.dragAutoScroll.sortDuringScroll && ye.autoScroller.isItemScrolling(this._item)) return this._sortX1 = this._sortX2 = this._gridX, this._sortY1 = this._sortY2 = this._gridY, this._isSortNeeded = !0, void (void 0 !== this._sortTimer && (this._sortTimer = window.clearTimeout(this._sortTimer)));\n\n      var e = this._checkHeuristics(this._gridX, this._gridY);\n\n      if (this._isSortNeeded || e) {\n        var i = t.dragSortHeuristics.sortInterval;\n        i <= 0 || this._isSortNeeded ? (this._isSortNeeded = !1, void 0 !== this._sortTimer && (this._sortTimer = window.clearTimeout(this._sortTimer)), this._checkOverlap()) : void 0 === this._sortTimer && (this._sortTimer = window.setTimeout(this._handleSortDelayed, i));\n      }\n    }\n  }, ye.prototype._handleSortDelayed = function () {\n    this._isSortNeeded = !0, this._sortTimer = void 0, at(this._item._id, this._handleSort);\n  }, ye.prototype._cancelSort = function () {\n    var t;\n    this._isSortNeeded = !1, void 0 !== this._sortTimer && (this._sortTimer = window.clearTimeout(this._sortTimer)), t = this._item._id, it.remove(1, U + t);\n  }, ye.prototype._finishSort = function () {\n    var t = this._getGrid()._settings.dragSort && (this._isSortNeeded || void 0 !== this._sortTimer);\n\n    this._cancelSort(), t && this._checkOverlap();\n  }, ye.prototype._checkOverlap = function () {\n    if (this._isActive) {\n      var t,\n          e,\n          n,\n          o,\n          r,\n          h,\n          a,\n          _,\n          l = this._item,\n          m = this._getGrid()._settings;\n\n      (t = dt(m.dragSortPredicate) ? m.dragSortPredicate(l, this._dragMoveEvent) : ye.defaultSortPredicate(l, m.dragSortPredicate)) && \"number\" == typeof t.index && (a = t.action === i ? i : s, _ = (e = l.getGrid()) !== (o = t.grid || e), n = e._items.indexOf(l), r = Wt(o._items, t.index, _ && a === s ? 1 : 0), (_ || r !== this._blockedSortIndex) && (_ ? (this._blockedSortIndex = null, h = o._items[r], e._hasListeners(c) && e._emit(c, {\n        item: l,\n        fromGrid: e,\n        fromIndex: n,\n        toGrid: o,\n        toIndex: r\n      }), o._hasListeners(p) && o._emit(p, {\n        item: l,\n        fromGrid: e,\n        fromIndex: n,\n        toGrid: o,\n        toIndex: r\n      }), l._gridId = o._id, this._isMigrating = l._gridId !== this._gridId, e._items.splice(n, 1), Gt(o._items, l, r), l._sortData = null, e._hasListeners(u) && e._emit(u, {\n        item: l,\n        fromGrid: e,\n        fromIndex: n,\n        toGrid: o,\n        toIndex: r\n      }), o._hasListeners(f) && o._emit(f, {\n        item: l,\n        fromGrid: e,\n        fromIndex: n,\n        toGrid: o,\n        toIndex: r\n      }), a === i && h && h.isActive() && o._items.indexOf(h) > -1 && o.send(h, e, n, {\n        appendTo: this._container || document.body,\n        layoutSender: !1,\n        layoutReceiver: !1\n      }), e.layout(), o.layout()) : n !== r && (this._blockedSortIndex = n, (a === i ? Nt : Bt)(e._items, n, r), e._hasListeners(d) && e._emit(d, {\n        item: l,\n        fromIndex: n,\n        toIndex: r,\n        action: a\n      }), e.layout())));\n    }\n  }, ye.prototype._finishMigration = function () {\n    var t,\n        e,\n        i = this._item,\n        s = i._dragRelease,\n        n = i._element,\n        o = i._isActive,\n        r = i.getGrid(),\n        h = r._element,\n        a = r._settings,\n        _ = a.dragContainer || h,\n        l = this._getGrid()._settings,\n        d = n.parentNode,\n        u = o ? l.itemVisibleClass : l.itemHiddenClass,\n        c = o ? a.itemVisibleClass : a.itemHiddenClass;\n\n    this._isMigrating = !1, this.destroy(), l.itemClass !== a.itemClass && (ue(n, l.itemClass), Ot(n, a.itemClass)), u !== c && (ue(n, u), Ot(n, c)), _ !== d && (_.appendChild(n), e = ie(d, _, !0), (t = de(n)).x -= e.left, t.y -= e.top), i._refreshDimensions(), e = ie(_, h, !0), s._containerDiffX = e.left, s._containerDiffY = e.top, i._drag = a.dragEnabled ? new ye(i) : null, _ !== d && i._setTranslate(t.x, t.y), i._visibility.setStyles(o ? a.visibleStyles : a.hiddenStyles), s.start();\n  }, ye.prototype._preStartCheck = function (t) {\n    0 === this._startPredicateState && (this._startPredicateState = 1), 1 === this._startPredicateState ? (this._startPredicateResult = this._startPredicate(this._item, t), !0 === this._startPredicateResult ? (this._startPredicateState = 2, this._onStart(t)) : !1 === this._startPredicateResult && (this._resetStartPredicate(t), this._dragger._reset(), this._startPredicateState = 0)) : 2 === this._startPredicateState && this._isActive && this._onMove(t);\n  }, ye.prototype._preEndCheck = function (t) {\n    var e = 2 === this._startPredicateState;\n    this._startPredicate(this._item, t), this._startPredicateState = 0, e && this._isActive && (this._isStarted ? this._onEnd(t) : this.stop());\n  }, ye.prototype._onStart = function (t) {\n    var e,\n        i,\n        s,\n        n = this._item;\n    n._isActive && (this._isActive = !0, this._dragStartEvent = t, ye.autoScroller.addItem(n), e = n._id, i = this._prepareStart, s = this._applyStart, it.add(0, N + e, i), it.add(2, F + e, s));\n  }, ye.prototype._prepareStart = function () {\n    if (this._isActive) {\n      var t = this._item;\n\n      if (t._isActive) {\n        var e = t._element,\n            i = this._getGrid(),\n            s = i._settings,\n            n = i._element,\n            o = s.dragContainer || n,\n            r = Jt(o),\n            h = de(e),\n            a = e.getBoundingClientRect(),\n            _ = o !== n;\n\n        if (this._container = o, this._containingBlock = r, this._clientX = a.left, this._clientY = a.top, this._left = this._gridX = h.x, this._top = this._gridY = h.y, this._scrollDiffX = this._scrollDiffY = 0, this._moveDiffX = this._moveDiffY = 0, this._resetHeuristics(this._gridX, this._gridY), _) {\n          var l = ie(r, n);\n          this._containerDiffX = l.left, this._containerDiffY = l.top;\n        }\n      }\n    }\n  }, ye.prototype._applyStart = function () {\n    if (this._isActive) {\n      var t = this._item;\n\n      if (t._isActive) {\n        var e = this._getGrid(),\n            i = t._element,\n            s = t._dragRelease,\n            n = t._migrate,\n            o = this._container !== e._element;\n\n        t.isPositioning() && t._layout.stop(!0, this._left, this._top), n._isActive && (this._left -= n._containerDiffX, this._top -= n._containerDiffY, this._gridX -= n._containerDiffX, this._gridY -= n._containerDiffY, n.stop(!0, this._left, this._top)), t.isReleasing() && s._reset(), e._settings.dragPlaceholder.enabled && t._dragPlaceholder.create(), this._isStarted = !0, e._emit(\"dragInit\", t, this._dragStartEvent), o && (i.parentNode === this._container ? (this._gridX -= this._containerDiffX, this._gridY -= this._containerDiffY) : (this._left += this._containerDiffX, this._top += this._containerDiffY, this._container.appendChild(i), t._setTranslate(this._left, this._top))), Ot(i, e._settings.itemDraggingClass), this._bindScrollListeners(), e._emit(\"dragStart\", t, this._dragStartEvent);\n      }\n    }\n  }, ye.prototype._onMove = function (t) {\n    var e,\n        i,\n        s,\n        n = this._item;\n    n._isActive ? (this._dragMoveEvent = t, e = n._id, i = this._prepareMove, s = this._applyMove, it.add(0, z + e, i), it.add(2, V + e, s), at(n._id, this._handleSort)) : this.stop();\n  }, ye.prototype._prepareMove = function () {\n    if (this._isActive && this._item._isActive) {\n      var t = this._getGrid()._settings.dragAxis,\n          e = this._dragMoveEvent,\n          i = this._dragPrevMoveEvent || this._dragStartEvent || e;\n\n      if (\"y\" !== t) {\n        var s = e.clientX - i.clientX;\n        this._left = this._left - this._moveDiffX + s, this._gridX = this._gridX - this._moveDiffX + s, this._clientX = this._clientX - this._moveDiffX + s, this._moveDiffX = s;\n      }\n\n      if (\"x\" !== t) {\n        var n = e.clientY - i.clientY;\n        this._top = this._top - this._moveDiffY + n, this._gridY = this._gridY - this._moveDiffY + n, this._clientY = this._clientY - this._moveDiffY + n, this._moveDiffY = n;\n      }\n\n      this._dragPrevMoveEvent = e;\n    }\n  }, ye.prototype._applyMove = function () {\n    if (this._isActive) {\n      var t = this._item;\n      t._isActive && (this._moveDiffX = this._moveDiffY = 0, t._setTranslate(this._left, this._top), this._getGrid()._emit(\"dragMove\", t, this._dragMoveEvent), ye.autoScroller.updateItem(t));\n    }\n  }, ye.prototype._onScroll = function (t) {\n    var e,\n        i,\n        s,\n        n = this._item;\n    n._isActive ? (this._scrollEvent = t, e = n._id, i = this._prepareScroll, s = this._applyScroll, it.add(0, j + e, i), it.add(2, Q + e, s), at(n._id, this._handleSort)) : this.stop();\n  }, ye.prototype._prepareScroll = function () {\n    if (this._isActive) {\n      var t = this._item;\n\n      if (t._isActive) {\n        var e = t._element,\n            i = this._getGrid()._element,\n            s = e.getBoundingClientRect();\n\n        if (this._container !== i) {\n          var n = ie(this._containingBlock, i);\n          this._containerDiffX = n.left, this._containerDiffY = n.top;\n        }\n\n        var o = this._clientX - this._moveDiffX - s.left;\n        this._left = this._left - this._scrollDiffX + o, this._scrollDiffX = o;\n        var r = this._clientY - this._moveDiffY - s.top;\n        this._top = this._top - this._scrollDiffY + r, this._scrollDiffY = r, this._gridX = this._left - this._containerDiffX, this._gridY = this._top - this._containerDiffY;\n      }\n    }\n  }, ye.prototype._applyScroll = function () {\n    if (this._isActive) {\n      var t = this._item;\n      t._isActive && (this._scrollDiffX = this._scrollDiffY = 0, t._setTranslate(this._left, this._top), this._getGrid()._emit(\"dragScroll\", t, this._scrollEvent));\n    }\n  }, ye.prototype._onEnd = function (t) {\n    var e = this._item,\n        i = e._element,\n        s = this._getGrid(),\n        n = s._settings,\n        o = e._dragRelease;\n\n    e._isActive ? (ot(e._id), rt(e._id), ht(e._id), this._finishSort(), this._unbindScrollListeners(), o._containerDiffX = this._containerDiffX, o._containerDiffY = this._containerDiffY, this._reset(), ue(i, n.itemDraggingClass), ye.autoScroller.removeItem(e), s._emit(\"dragEnd\", e, t), this._isMigrating ? this._finishMigration() : o.start()) : this.stop();\n  };\n  var we = /^(webkit|moz|ms|o|Webkit|Moz|MS|O)(?=[A-Z])/,\n      De = {};\n\n  function be(t) {\n    var e = De[t];\n    return e || ((e = t.replace(we, \"\")) !== t && (e = e[0].toLowerCase() + e.slice(1)), De[t] = e, e);\n  }\n\n  function Ae(t, e) {\n    for (var i in e) {\n      t.style[i] = e[i];\n    }\n  }\n\n  var Ee,\n      Te,\n      xe = !(!Element || !dt(Element.prototype.animate)),\n      ke = !!(Element && (Ee = Element.prototype.animate, Te = window.Symbol, Ee && dt(Te) && dt(Te.toString) && Te(Ee).toString().indexOf(\"[native code]\") > -1));\n\n  function Le(t) {\n    this._element = t, this._animation = null, this._duration = 0, this._easing = \"\", this._callback = null, this._props = [], this._values = [], this._isDestroyed = !1, this._onFinish = this._onFinish.bind(this);\n  }\n\n  function Re(t, e) {\n    var i = {};\n\n    for (var s in t) {\n      i[e ? s : be(s)] = t[s];\n    }\n\n    return i;\n  }\n\n  function Ie(t, e) {\n    return \"translateX(\" + t + \"px) translateY(\" + e + \"px)\";\n  }\n\n  function Ce(t) {\n    this._item = t, this._animation = new Le(), this._element = null, this._className = \"\", this._didMigrate = !1, this._resetAfterLayout = !1, this._left = 0, this._top = 0, this._transX = 0, this._transY = 0, this._nextTransX = 0, this._nextTransY = 0, this._setupAnimation = this._setupAnimation.bind(this), this._startAnimation = this._startAnimation.bind(this), this._updateDimensions = this._updateDimensions.bind(this), this._onLayoutStart = this._onLayoutStart.bind(this), this._onLayoutEnd = this._onLayoutEnd.bind(this), this._onReleaseEnd = this._onReleaseEnd.bind(this), this._onMigrate = this._onMigrate.bind(this), this._onHide = this._onHide.bind(this);\n  }\n\n  function Me(t) {\n    this._item = t, this._isActive = !1, this._isDestroyed = !1, this._isPositioningStarted = !1, this._containerDiffX = 0, this._containerDiffY = 0;\n  }\n\n  Le.prototype.start = function (t, e, i) {\n    if (!this._isDestroyed) {\n      var s = this._element,\n          n = i || {};\n      if (!xe) return Ae(s, e), this._callback = dt(n.onFinish) ? n.onFinish : null, void this._onFinish();\n      var o,\n          r,\n          h,\n          a = this._animation,\n          _ = this._props,\n          l = this._values,\n          d = n.duration || 300,\n          u = n.easing || \"ease\",\n          c = !1;\n\n      if (a && (r = 0, d === this._duration && u === this._easing || (c = !0), !c)) {\n        for (o in e) {\n          if (++r, -1 === (h = _.indexOf(o)) || e[o] !== l[h]) {\n            c = !0;\n            break;\n          }\n        }\n\n        r !== _.length && (c = !0);\n      }\n\n      if (c && a.cancel(), this._callback = dt(n.onFinish) ? n.onFinish : null, !a || c) {\n        for (o in _.length = l.length = 0, e) {\n          _.push(o), l.push(e[o]);\n        }\n\n        this._duration = d, this._easing = u, this._animation = s.animate([Re(t, ke), Re(e, ke)], {\n          duration: d,\n          easing: u\n        }), this._animation.onfinish = this._onFinish, Ae(s, e);\n      }\n    }\n  }, Le.prototype.stop = function () {\n    !this._isDestroyed && this._animation && (this._animation.cancel(), this._animation = this._callback = null, this._props.length = this._values.length = 0);\n  }, Le.prototype.getCurrentStyles = function () {\n    return Se(element, currentProps);\n  }, Le.prototype.isAnimating = function () {\n    return !!this._animation;\n  }, Le.prototype.destroy = function () {\n    this._isDestroyed || (this.stop(), this._element = null, this._isDestroyed = !0);\n  }, Le.prototype._onFinish = function () {\n    var t = this._callback;\n    this._animation = this._callback = null, this._props.length = this._values.length = 0, t && t();\n  }, Ce.prototype._updateDimensions = function () {\n    this.isActive() && Ae(this._element, {\n      width: this._item._width + \"px\",\n      height: this._item._height + \"px\"\n    });\n  }, Ce.prototype._onLayoutStart = function (t, e) {\n    var i = this._item;\n\n    if (-1 !== t.indexOf(i)) {\n      var s = i._left,\n          n = i._top,\n          o = this._left,\n          r = this._top;\n\n      if (this._left = s, this._top = n, e || this._didMigrate || o !== s || r !== n) {\n        var h,\n            a,\n            _,\n            l = s + i._marginLeft,\n            d = n + i._marginTop,\n            u = i.getGrid();\n\n        if (!(!e && u._settings.layoutDuration > 0) || this._didMigrate) return _t(i._id), this._element.style[Ft] = Ie(l, d), this._animation.stop(), void (this._didMigrate && (u.getElement().appendChild(this._element), this._didMigrate = !1));\n        this._nextTransX = l, this._nextTransY = d, h = i._id, a = this._setupAnimation, _ = this._startAnimation, it.add(0, Z + h, a), it.add(2, J + h, _);\n      }\n    } else this.reset();\n  }, Ce.prototype._setupAnimation = function () {\n    if (this.isActive()) {\n      var t = de(this._element);\n      this._transX = t.x, this._transY = t.y;\n    }\n  }, Ce.prototype._startAnimation = function () {\n    if (this.isActive()) {\n      var t = this._animation,\n          e = this._transX,\n          i = this._transY,\n          s = this._nextTransX,\n          n = this._nextTransY;\n\n      if (e !== s || i !== n) {\n        var o = this._item.getGrid()._settings,\n            r = {},\n            h = {};\n\n        r[Ft] = Ie(e, i), h[Ft] = Ie(s, n), t.start(r, h, {\n          duration: o.layoutDuration,\n          easing: o.layoutEasing,\n          onFinish: this._onLayoutEnd\n        });\n      } else t.isAnimating() && (this._element.style[Ft] = Ie(s, n), t.stop());\n    }\n  }, Ce.prototype._onLayoutEnd = function () {\n    this._resetAfterLayout && this.reset();\n  }, Ce.prototype._onReleaseEnd = function (t) {\n    if (t._id === this._item._id) {\n      if (!this._animation.isAnimating()) return void this.reset();\n      this._resetAfterLayout = !0;\n    }\n  }, Ce.prototype._onMigrate = function (t) {\n    if (t.item === this._item) {\n      var e = this._item.getGrid(),\n          i = t.toGrid;\n\n      e.off(m, this._onReleaseEnd), e.off(n, this._onLayoutStart), e.off(c, this._onMigrate), e.off(a, this._onHide), i.on(m, this._onReleaseEnd), i.on(n, this._onLayoutStart), i.on(c, this._onMigrate), i.on(a, this._onHide), this._didMigrate = !0;\n    }\n  }, Ce.prototype._onHide = function (t) {\n    t.indexOf(this._item) > -1 && this.reset();\n  }, Ce.prototype.create = function () {\n    if (this.isActive()) this._resetAfterLayout = !1;else {\n      var t,\n          e = this._item,\n          i = e.getGrid(),\n          s = i._settings,\n          o = this._animation;\n      this._left = e._left, this._top = e._top, t = dt(s.dragPlaceholder.createElement) ? s.dragPlaceholder.createElement(e) : document.createElement(\"div\"), this._element = t, o._element = t, this._className = s.itemPlaceholderClass || \"\", this._className && Ot(t, this._className), Ae(t, {\n        position: \"absolute\",\n        left: \"0px\",\n        top: \"0px\",\n        width: e._width + \"px\",\n        height: e._height + \"px\"\n      }), t.style[Ft] = Ie(e._left + e._marginLeft, e._top + e._marginTop), i.on(n, this._onLayoutStart), i.on(m, this._onReleaseEnd), i.on(c, this._onMigrate), i.on(a, this._onHide), dt(s.dragPlaceholder.onCreate) && s.dragPlaceholder.onCreate(e, t), i.getElement().appendChild(t);\n    }\n  }, Ce.prototype.reset = function () {\n    if (this.isActive()) {\n      var t,\n          e = this._element,\n          i = this._item,\n          s = i.getGrid(),\n          o = s._settings,\n          r = this._animation;\n      this._resetAfterLayout = !1, _t(i._id), t = i._id, it.remove(2, $ + t), r.stop(), r._element = null, s.off(m, this._onReleaseEnd), s.off(n, this._onLayoutStart), s.off(c, this._onMigrate), s.off(a, this._onHide), this._className && (ue(e, this._className), this._className = \"\"), e.parentNode.removeChild(e), this._element = null, dt(o.dragPlaceholder.onRemove) && o.dragPlaceholder.onRemove(i, e);\n    }\n  }, Ce.prototype.isActive = function () {\n    return !!this._element;\n  }, Ce.prototype.getElement = function () {\n    return this._element;\n  }, Ce.prototype.updateDimensions = function () {\n    var t, e;\n    this.isActive() && (t = this._item._id, e = this._updateDimensions, it.add(2, $ + t, e));\n  }, Ce.prototype.destroy = function () {\n    this.reset(), this._animation.destroy(), this._item = this._animation = null;\n  }, Me.prototype.start = function () {\n    if (!this._isDestroyed && !this._isActive) {\n      var t = this._item,\n          e = t.getGrid(),\n          i = e._settings;\n      this._isActive = !0, Ot(t._element, i.itemReleasingClass), i.dragRelease.useDragContainer || this._placeToGrid(), e._emit(\"dragReleaseStart\", t), e._nextLayoutData || t._layout.start(!1);\n    }\n  }, Me.prototype.stop = function (t, e, i) {\n    if (!this._isDestroyed && this._isActive) {\n      var s = this._item,\n          n = s.getGrid();\n      t || void 0 !== e && void 0 !== i || (e = s._left, i = s._top);\n\n      var o = this._placeToGrid(e, i);\n\n      this._reset(o), t || n._emit(m, s);\n    }\n  }, Me.prototype.isJustReleased = function () {\n    return this._isActive && !1 === this._isPositioningStarted;\n  }, Me.prototype.destroy = function () {\n    this._isDestroyed || (this.stop(!0), this._item = null, this._isDestroyed = !0);\n  }, Me.prototype._placeToGrid = function (t, e) {\n    if (!this._isDestroyed) {\n      var i = this._item,\n          s = i._element,\n          n = i.getGrid()._element,\n          o = !1;\n\n      if (s.parentNode !== n) {\n        if (void 0 === t || void 0 === e) {\n          var r = de(s);\n          t = r.x - this._containerDiffX, e = r.y - this._containerDiffY;\n        }\n\n        n.appendChild(s), i._setTranslate(t, e), o = !0;\n      }\n\n      return this._containerDiffX = 0, this._containerDiffY = 0, o;\n    }\n  }, Me.prototype._reset = function (t) {\n    if (!this._isDestroyed) {\n      var e = this._item,\n          i = e.getGrid()._settings.itemReleasingClass;\n\n      this._isActive = !1, this._isPositioningStarted = !1, this._containerDiffX = 0, this._containerDiffY = 0, i && (t && e._element.clientWidth, ue(e._element, i));\n    }\n  };\n\n  function Pe(t) {\n    var e = t._element,\n        i = e.style;\n    this._item = t, this._isActive = !1, this._isDestroyed = !1, this._isInterrupted = !1, this._currentStyles = {}, this._targetStyles = {}, this._nextLeft = 0, this._nextTop = 0, this._offsetLeft = 0, this._offsetTop = 0, this._skipNextAnimation = !1, this._animOptions = {\n      onFinish: this._finish.bind(this),\n      duration: 0,\n      easing: 0\n    }, i.left = \"0px\", i.top = \"0px\", t._setTranslate(0, 0), this._animation = new Le(e), this._queue = \"layout-\" + t._id, this._setupAnimation = this._setupAnimation.bind(this), this._startAnimation = this._startAnimation.bind(this);\n  }\n\n  function Xe(t) {\n    this._item = t, this._isActive = !1, this._isDestroyed = !1, this._container = !1, this._containerDiffX = 0, this._containerDiffY = 0;\n  }\n\n  function Ye(t) {\n    var e = t._isActive,\n        i = t._element,\n        s = i.children[0],\n        n = t.getGrid()._settings;\n\n    if (!s) throw new Error(\"No valid child element found within item element.\");\n    this._item = t, this._isDestroyed = !1, this._isHidden = !e, this._isHiding = !1, this._isShowing = !1, this._childElement = s, this._currentStyleProps = [], this._animation = new Le(s), this._queue = \"visibility-\" + t._id, this._finishShow = this._finishShow.bind(this), this._finishHide = this._finishHide.bind(this), i.style.display = e ? \"\" : \"none\", Ot(i, e ? n.itemVisibleClass : n.itemHiddenClass), this.setStyles(e ? n.visibleStyles : n.hiddenStyles);\n  }\n\n  Pe.prototype.start = function (t, e) {\n    if (!this._isDestroyed) {\n      var i,\n          s,\n          n,\n          o = this._item,\n          r = o._dragRelease,\n          h = o.getGrid()._settings,\n          a = this._isActive,\n          _ = r.isJustReleased(),\n          l = _ ? h.dragRelease.duration : h.layoutDuration,\n          d = _ ? h.dragRelease.easing : h.layoutEasing,\n          u = !t && !this._skipNextAnimation && l > 0;\n\n      if (a && (st(o._id), o._emitter.burst(this._queue, !0, o)), _ && (r._isPositioningStarted = !0), dt(e) && o._emitter.on(this._queue, e), this._skipNextAnimation = !1, !u) return this._updateOffsets(), o._setTranslate(this._nextLeft, this._nextTop), this._animation.stop(), void this._finish();\n      this._animation.isAnimating() && (this._animation._animation.onfinish = null), this._isActive = !0, this._animOptions.easing = d, this._animOptions.duration = l, this._isInterrupted = a, i = o._id, s = this._setupAnimation, n = this._startAnimation, it.add(0, H + i, s), it.add(2, G + i, n);\n    }\n  }, Pe.prototype.stop = function (t, e, i) {\n    if (!this._isDestroyed && this._isActive) {\n      var s = this._item;\n\n      if (st(s._id), this._animation.isAnimating()) {\n        if (void 0 === e || void 0 === i) {\n          var n = de(s._element);\n          e = n.x, i = n.y;\n        }\n\n        s._setTranslate(e, i), this._animation.stop();\n      }\n\n      ue(s._element, s.getGrid()._settings.itemPositioningClass), this._isActive = !1, t && s._emitter.burst(this._queue, !0, s);\n    }\n  }, Pe.prototype.destroy = function () {\n    if (!this._isDestroyed) {\n      var t = this._item._element.style;\n      this.stop(!0, 0, 0), this._item._emitter.clear(this._queue), this._animation.destroy(), t[Ft] = \"\", t.left = \"\", t.top = \"\", this._item = null, this._currentStyles = null, this._targetStyles = null, this._animOptions = null, this._isDestroyed = !0;\n    }\n  }, Pe.prototype._updateOffsets = function () {\n    if (!this._isDestroyed) {\n      var t = this._item,\n          e = t._migrate,\n          i = t._dragRelease;\n      this._offsetLeft = i._isActive ? i._containerDiffX : e._isActive ? e._containerDiffX : 0, this._offsetTop = i._isActive ? i._containerDiffY : e._isActive ? e._containerDiffY : 0, this._nextLeft = this._item._left + this._offsetLeft, this._nextTop = this._item._top + this._offsetTop;\n    }\n  }, Pe.prototype._finish = function () {\n    if (!this._isDestroyed) {\n      var t = this._item,\n          e = t._migrate,\n          i = t._dragRelease;\n      t._tX = this._nextLeft, t._tY = this._nextTop, this._isActive && (this._isActive = !1, ue(t._element, t.getGrid()._settings.itemPositioningClass)), i._isActive && i.stop(), e._isActive && e.stop(), t._emitter.burst(this._queue, !1, t);\n    }\n  }, Pe.prototype._setupAnimation = function () {\n    var t = this._item;\n\n    if (void 0 === t._tX || void 0 === t._tY) {\n      var e = de(t._element);\n      t._tX = e.x, t._tY = e.y;\n    }\n  }, Pe.prototype._startAnimation = function () {\n    var t = this._item,\n        e = t.getGrid()._settings,\n        i = this._animOptions.duration <= 0;\n\n    this._updateOffsets();\n\n    var s = Math.abs(t._left - (t._tX - this._offsetLeft)),\n        n = Math.abs(t._top - (t._tY - this._offsetTop));\n    if (i || s < 2 && n < 2) return (s || n || this._isInterrupted) && t._setTranslate(this._nextLeft, this._nextTop), this._animation.stop(), void this._finish();\n    this._isInterrupted || Ot(t._element, e.itemPositioningClass), this._currentStyles[Ft] = Ie(t._tX, t._tY), this._targetStyles[Ft] = Ie(this._nextLeft, this._nextTop), t._tX = t._tY = void 0, this._animation.start(this._currentStyles, this._targetStyles, this._animOptions);\n  }, Xe.prototype.start = function (t, e, i) {\n    if (!this._isDestroyed) {\n      var s,\n          n,\n          o,\n          r,\n          h,\n          a,\n          _,\n          l,\n          d,\n          m,\n          g = this._item,\n          v = g._element,\n          y = g.isActive(),\n          S = g.isVisible(),\n          w = g.getGrid(),\n          D = w._settings,\n          b = t._settings,\n          A = t._element,\n          E = t._items,\n          T = w._items.indexOf(g),\n          x = i || document.body;\n\n      if (\"number\" == typeof e) s = Wt(E, e, 1);else {\n        if (!(n = t.getItem(e))) return;\n        s = E.indexOf(n);\n      }\n      (g.isPositioning() || this._isActive || g.isReleasing()) && (_ = (a = de(v)).x, l = a.y), g.isPositioning() && g._layout.stop(!0, _, l), this._isActive && (_ -= this._containerDiffX, l -= this._containerDiffY, this.stop(!0, _, l)), g.isReleasing() && (_ -= g._dragRelease._containerDiffX, l -= g._dragRelease._containerDiffY, g._dragRelease.stop(!0, _, l)), g._visibility.stop(!0), g._drag && g._drag.destroy(), w._hasListeners(c) && w._emit(c, {\n        item: g,\n        fromGrid: w,\n        fromIndex: T,\n        toGrid: t,\n        toIndex: s\n      }), t._hasListeners(p) && t._emit(p, {\n        item: g,\n        fromGrid: w,\n        fromIndex: T,\n        toGrid: t,\n        toIndex: s\n      }), D.itemClass !== b.itemClass && (ue(v, D.itemClass), Ot(v, b.itemClass)), (d = S ? D.itemVisibleClass : D.itemHiddenClass) !== (m = S ? b.itemVisibleClass : b.itemHiddenClass) && (ue(v, d), Ot(v, m)), w._items.splice(T, 1), Gt(E, g, s), g._gridId = t._id, y ? x !== (o = v.parentNode) && (x.appendChild(v), r = ie(x, o, !0), a || (_ = (a = de(v)).x, l = a.y), g._setTranslate(_ + r.left, l + r.top)) : A.appendChild(v), g._visibility.setStyles(S ? b.visibleStyles : b.hiddenStyles), y && (h = ie(x, A, !0)), g._refreshDimensions(), g._sortData = null, g._drag = b.dragEnabled ? new ye(g) : null, y ? (this._isActive = !0, this._container = x, this._containerDiffX = h.left, this._containerDiffY = h.top) : (this._isActive = !1, this._container = null, this._containerDiffX = 0, this._containerDiffY = 0), w._hasListeners(u) && w._emit(u, {\n        item: g,\n        fromGrid: w,\n        fromIndex: T,\n        toGrid: t,\n        toIndex: s\n      }), t._hasListeners(f) && t._emit(f, {\n        item: g,\n        fromGrid: w,\n        fromIndex: T,\n        toGrid: t,\n        toIndex: s\n      });\n    }\n  }, Xe.prototype.stop = function (t, e, i) {\n    if (!this._isDestroyed && this._isActive) {\n      var s,\n          n = this._item,\n          o = n._element,\n          r = n.getGrid()._element;\n\n      this._container !== r && (void 0 !== e && void 0 !== i || (t ? (e = (s = de(o)).x - this._containerDiffX, i = s.y - this._containerDiffY) : (e = n._left, i = n._top)), r.appendChild(o), n._setTranslate(e, i)), this._isActive = !1, this._container = null, this._containerDiffX = 0, this._containerDiffY = 0;\n    }\n  }, Xe.prototype.destroy = function () {\n    this._isDestroyed || (this.stop(!0), this._item = null, this._isDestroyed = !0);\n  }, Ye.prototype.show = function (t, e) {\n    if (!this._isDestroyed) {\n      var i = this._item,\n          s = i._element,\n          n = dt(e) ? e : null,\n          o = i.getGrid()._settings;\n\n      this._isShowing || this._isHidden ? !this._isShowing || t ? (this._isShowing || (i._emitter.burst(this._queue, !0, i), ue(s, o.itemHiddenClass), Ot(s, o.itemVisibleClass), this._isHiding || (s.style.display = \"\")), n && i._emitter.on(this._queue, n), this._isShowing = !0, this._isHiding = this._isHidden = !1, this._startAnimation(!0, t, this._finishShow)) : n && i._emitter.on(this._queue, n) : n && n(!1, i);\n    }\n  }, Ye.prototype.hide = function (t, e) {\n    if (!this._isDestroyed) {\n      var i = this._item,\n          s = i._element,\n          n = dt(e) ? e : null,\n          o = i.getGrid()._settings;\n\n      this._isHiding || !this._isHidden ? !this._isHiding || t ? (this._isHiding || (i._emitter.burst(this._queue, !0, i), Ot(s, o.itemHiddenClass), ue(s, o.itemVisibleClass)), n && i._emitter.on(this._queue, n), this._isHidden = this._isHiding = !0, this._isShowing = !1, this._startAnimation(!1, t, this._finishHide)) : n && i._emitter.on(this._queue, n) : n && n(!1, i);\n    }\n  }, Ye.prototype.stop = function (t) {\n    if (!this._isDestroyed && (this._isHiding || this._isShowing)) {\n      var e = this._item;\n      nt(e._id), this._animation.stop(), t && e._emitter.burst(this._queue, !0, e);\n    }\n  }, Ye.prototype.setStyles = function (t) {\n    var e = this._childElement,\n        i = this._currentStyleProps;\n\n    for (var s in this._removeCurrentStyles(), t) {\n      i.push(s), e.style[s] = t[s];\n    }\n  }, Ye.prototype.destroy = function () {\n    if (!this._isDestroyed) {\n      var t = this._item,\n          e = t._element,\n          i = t.getGrid()._settings;\n\n      this.stop(!0), t._emitter.clear(this._queue), this._animation.destroy(), this._removeCurrentStyles(), ue(e, i.itemVisibleClass), ue(e, i.itemHiddenClass), e.style.display = \"\", this._isHiding = this._isShowing = !1, this._isDestroyed = this._isHidden = !0;\n    }\n  }, Ye.prototype._startAnimation = function (t, e, i) {\n    if (!this._isDestroyed) {\n      var s,\n          n = this._item,\n          o = this._animation,\n          r = this._childElement,\n          h = n.getGrid()._settings,\n          a = t ? h.visibleStyles : h.hiddenStyles,\n          _ = t ? h.showDuration : h.hideDuration,\n          l = t ? h.showEasing : h.hideEasing,\n          d = e || _ <= 0;\n\n      if (a) {\n        if (nt(n._id), d) return Ae(r, a), o.stop(), void (i && i());\n        var u, c, f;\n        o.isAnimating() && (o._animation.onfinish = null), u = n._id, c = function c() {\n          s = Se(r, a);\n        }, f = function f() {\n          o.start(s, a, {\n            duration: _,\n            easing: l,\n            onFinish: i\n          });\n        }, it.add(0, W + u, c), it.add(2, B + u, f);\n      } else i && i();\n    }\n  }, Ye.prototype._finishShow = function () {\n    this._isHidden || (this._isShowing = !1, this._item._emitter.burst(this._queue, !1, this._item));\n  }, Ye.prototype._finishHide = function () {\n    if (this._isHidden) {\n      var t = this._item;\n      this._isHiding = !1, t._layout.stop(!0, 0, 0), t._element.style.display = \"none\", t._emitter.burst(this._queue, !1, t);\n    }\n  }, Ye.prototype._removeCurrentStyles = function () {\n    for (var t = this._childElement, e = this._currentStyleProps, i = 0; i < e.length; i++) {\n      t.style[e[i]] = \"\";\n    }\n\n    e.length = 0;\n  };\n  var qe = 0;\n\n  function Oe() {\n    return ++qe;\n  }\n\n  function He(t, i, s) {\n    var n = t._settings;\n\n    if (e) {\n      if (e.has(i)) throw new Error(\"You can only create one Muuri Item per element!\");\n      e.set(i, this);\n    }\n\n    this._id = Oe(), this._gridId = t._id, this._element = i, this._isDestroyed = !1, this._left = 0, this._top = 0, this._width = 0, this._height = 0, this._marginLeft = 0, this._marginRight = 0, this._marginTop = 0, this._marginBottom = 0, this._tX = void 0, this._tY = void 0, this._sortData = null, this._emitter = new S(), i.parentNode !== t._element && t._element.appendChild(i), Ot(i, n.itemClass), \"boolean\" != typeof s && (s = \"none\" !== ct(i, \"display\")), this._isActive = s, this._visibility = new Ye(this), this._layout = new Pe(this), this._migrate = new Xe(this), this._drag = n.dragEnabled ? new ye(this) : null, this._dragRelease = new Me(this), this._dragPlaceholder = new Ce(this);\n  }\n\n  function Ge(t) {\n    var e,\n        i,\n        s,\n        n,\n        o,\n        r = .001,\n        h = .5;\n\n    function a(t) {\n      return ((1e3 * t + .5 << 0) / 10 << 0) / 100;\n    }\n\n    function _() {\n      this.currentRects = [], this.nextRects = [], this.rectTarget = {}, this.rectStore = [], this.slotSizes = [], this.rectId = 0, this.slotIndex = -1, this.slotData = {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      }, this.sortRectsLeftTop = this.sortRectsLeftTop.bind(this), this.sortRectsTopLeft = this.sortRectsTopLeft.bind(this);\n    }\n\n    if (_.prototype.computeLayout = function (t, e) {\n      var i,\n          s,\n          n,\n          o,\n          r,\n          h,\n          _ = t.items,\n          l = t.slots,\n          d = !!(1 & e),\n          u = !!(2 & e),\n          c = !!(4 & e),\n          f = !!(8 & e),\n          p = !!(16 & e),\n          m = \"number\" == typeof _[0];\n      if (!_.length) return t;\n\n      for (s = m ? 2 : 1, i = 0; i < _.length; i += s) {\n        m ? (o = _[i], r = _[i + 1]) : (o = (n = _[i])._width + n._marginLeft + n._marginRight, r = n._height + n._marginTop + n._marginBottom), p && (o = a(o), r = a(r)), h = this.computeNextSlot(t, o, r, d, u), u ? h.left + h.width > t.width && (t.width = h.left + h.width) : h.top + h.height > t.height && (t.height = h.top + h.height), l[++this.slotIndex] = h.left, l[++this.slotIndex] = h.top, (c || f) && this.slotSizes.push(h.width, h.height);\n      }\n\n      if (c) for (i = 0; i < l.length; i += 2) {\n        l[i] = t.width - (l[i] + this.slotSizes[i]);\n      }\n      if (f) for (i = 1; i < l.length; i += 2) {\n        l[i] = t.height - (l[i] + this.slotSizes[i]);\n      }\n      return this.slotSizes.length = 0, this.currentRects.length = 0, this.nextRects.length = 0, this.rectStore.length = 0, this.rectId = 0, this.slotIndex = -1, t;\n    }, _.prototype.computeNextSlot = function (t, e, i, s, n) {\n      var o,\n          a,\n          _,\n          l,\n          d,\n          u = this.slotData,\n          c = this.currentRects,\n          f = this.nextRects,\n          p = !1;\n\n      for (f.length = 0, u.left = null, u.top = null, u.width = e, u.height = i, l = 0; l < c.length; l++) {\n        if ((a = c[l]) && (o = this.getRect(a), u.width <= o.width + r && u.height <= o.height + r)) {\n          u.left = o.left, u.top = o.top;\n          break;\n        }\n      }\n\n      if (null === u.left && (n ? (u.left = t.width, u.top = 0) : (u.left = 0, u.top = t.height), s || (p = !0)), !n && u.top + u.height > t.height + r && (u.left > h && f.push(this.addRect(0, t.height, u.left, 1 / 0)), u.left + u.width < t.width - h && f.push(this.addRect(u.left + u.width, t.height, t.width - u.left - u.width, 1 / 0)), t.height = u.top + u.height), n && u.left + u.width > t.width + r && (u.top > h && f.push(this.addRect(t.width, 0, 1 / 0, u.top)), u.top + u.height < t.height - h && f.push(this.addRect(t.width, u.top + u.height, 1 / 0, t.height - u.top - u.height)), t.width = u.left + u.width), !p) for (s && (l = 0); l < c.length; l++) {\n        if (a = c[l]) for (o = this.getRect(a), _ = this.splitRect(o, u), d = 0; d < _.length; d++) {\n          a = _[d], o = this.getRect(a), (n ? o.left + r < t.width - r : o.top + r < t.height - r) && f.push(a);\n        }\n      }\n      return f.length > 1 && this.purgeRects(f).sort(n ? this.sortRectsLeftTop : this.sortRectsTopLeft), this.currentRects = f, this.nextRects = c, u;\n    }, _.prototype.addRect = function (t, e, i, s) {\n      var n = ++this.rectId;\n      return this.rectStore[n] = t || 0, this.rectStore[++this.rectId] = e || 0, this.rectStore[++this.rectId] = i || 0, this.rectStore[++this.rectId] = s || 0, n;\n    }, _.prototype.getRect = function (t, e) {\n      return e || (e = this.rectTarget), e.left = this.rectStore[t] || 0, e.top = this.rectStore[++t] || 0, e.width = this.rectStore[++t] || 0, e.height = this.rectStore[++t] || 0, e;\n    }, _.prototype.splitRect = (e = [], i = 0, s = 0, function (t, n) {\n      return e.length = 0, t.left + t.width <= n.left + r || n.left + n.width <= t.left + r || t.top + t.height <= n.top + r || n.top + n.height <= t.top + r ? (e.push(this.addRect(t.left, t.top, t.width, t.height)), e) : ((i = n.left - t.left) >= h && e.push(this.addRect(t.left, t.top, i, t.height)), (i = t.left + t.width - (n.left + n.width)) >= h && e.push(this.addRect(n.left + n.width, t.top, i, t.height)), (s = n.top - t.top) >= h && e.push(this.addRect(t.left, t.top, t.width, s)), (s = t.top + t.height - (n.top + n.height)) >= h && e.push(this.addRect(t.left, n.top + n.height, t.width, s)), e);\n    }), _.prototype.isRectAWithinRectB = function (t, e) {\n      return t.left + r >= e.left && t.top + r >= e.top && t.left + t.width - r <= e.left + e.width && t.top + t.height - r <= e.top + e.height;\n    }, _.prototype.purgeRects = (n = {}, o = {}, function (t) {\n      for (var e, i = t.length; i--;) {\n        if (e = t.length, t[i]) for (this.getRect(t[i], n); e--;) {\n          if (t[e] && i !== e && (this.getRect(t[e], o), this.isRectAWithinRectB(n, o))) {\n            t[i] = 0;\n            break;\n          }\n        }\n      }\n\n      return t;\n    }), _.prototype.sortRectsTopLeft = function () {\n      var t = {},\n          e = {};\n      return function (i, s) {\n        return this.getRect(i, t), this.getRect(s, e), t.top < e.top && t.top + r < e.top ? -1 : t.top > e.top && t.top - r > e.top ? 1 : t.left < e.left && t.left + r < e.left ? -1 : t.left > e.left && t.left - r > e.left ? 1 : 0;\n      };\n    }(), _.prototype.sortRectsLeftTop = function () {\n      var t = {},\n          e = {};\n      return function (i, s) {\n        return this.getRect(i, t), this.getRect(s, e), t.left < e.left && t.left + r < e.left ? -1 : t.left > e.left && t.left - r < e.left ? 1 : t.top < e.top && t.top + r < e.top ? -1 : t.top > e.top && t.top - r > e.top ? 1 : 0;\n      };\n    }(), t) {\n      var l = new _();\n\n      self.onmessage = function (t) {\n        var e = new Float32Array(t.data),\n            i = e.subarray(4, e.length),\n            s = new Float32Array(i.length),\n            n = e[3],\n            o = {\n          items: i,\n          slots: s,\n          width: e[1],\n          height: e[2]\n        };\n        l.computeLayout(o, n), e[1] = o.width, e[2] = o.height, e.set(o.slots, 4), postMessage(e.buffer, [e.buffer]);\n      };\n    }\n\n    return _;\n  }\n\n  He.prototype.getGrid = function () {\n    return t[this._gridId];\n  }, He.prototype.getElement = function () {\n    return this._element;\n  }, He.prototype.getWidth = function () {\n    return this._width;\n  }, He.prototype.getHeight = function () {\n    return this._height;\n  }, He.prototype.getMargin = function () {\n    return {\n      left: this._marginLeft,\n      right: this._marginRight,\n      top: this._marginTop,\n      bottom: this._marginBottom\n    };\n  }, He.prototype.getPosition = function () {\n    return {\n      left: this._left,\n      top: this._top\n    };\n  }, He.prototype.isActive = function () {\n    return this._isActive;\n  }, He.prototype.isVisible = function () {\n    return !!this._visibility && !this._visibility._isHidden;\n  }, He.prototype.isShowing = function () {\n    return !(!this._visibility || !this._visibility._isShowing);\n  }, He.prototype.isHiding = function () {\n    return !(!this._visibility || !this._visibility._isHiding);\n  }, He.prototype.isPositioning = function () {\n    return !(!this._layout || !this._layout._isActive);\n  }, He.prototype.isDragging = function () {\n    return !(!this._drag || !this._drag._isActive);\n  }, He.prototype.isReleasing = function () {\n    return !(!this._dragRelease || !this._dragRelease._isActive);\n  }, He.prototype.isDestroyed = function () {\n    return this._isDestroyed;\n  }, He.prototype._refreshDimensions = function (t) {\n    if (!(this._isDestroyed || !0 !== t && this._visibility._isHidden)) {\n      var e = this._element,\n          i = this._dragPlaceholder,\n          s = e.getBoundingClientRect();\n      this._width = s.width, this._height = s.height, this._marginLeft = Math.max(0, ft(e, \"margin-left\")), this._marginRight = Math.max(0, ft(e, \"margin-right\")), this._marginTop = Math.max(0, ft(e, \"margin-top\")), this._marginBottom = Math.max(0, ft(e, \"margin-bottom\")), i && i.updateDimensions();\n    }\n  }, He.prototype._refreshSortData = function () {\n    if (!this._isDestroyed) {\n      var t,\n          e = this._sortData = {},\n          i = this.getGrid()._settings.sortData;\n\n      for (t in i) {\n        e[t] = i[t](this, this._element);\n      }\n    }\n  }, He.prototype._addToLayout = function (t, e) {\n    !0 !== this._isActive && (this._isActive = !0, this._left = t || 0, this._top = e || 0);\n  }, He.prototype._removeFromLayout = function () {\n    !1 !== this._isActive && (this._isActive = !1, this._left = 0, this._top = 0);\n  }, He.prototype._canSkipLayout = function (t, e) {\n    return this._left === t && this._top === e && !this._migrate._isActive && !this._layout._skipNextAnimation && !this._dragRelease.isJustReleased();\n  }, He.prototype._setTranslate = function (t, e) {\n    return (this._tX !== t || this._tY !== e) && (this._tX = t, this._tY = e, this._element.style[Ft] = Ie(t, e), !0);\n  }, He.prototype._destroy = function (t) {\n    if (!this._isDestroyed) {\n      var i = this._element,\n          s = this.getGrid()._settings;\n\n      this._dragPlaceholder.destroy(), this._dragRelease.destroy(), this._migrate.destroy(), this._layout.destroy(), this._visibility.destroy(), this._drag && this._drag.destroy(), this._emitter.destroy(), ue(i, s.itemClass), t && i.parentNode.removeChild(i), e && e[\"delete\"](i), this._isActive = !1, this._isDestroyed = !0;\n    }\n  };\n  var We = Ge(),\n      Be = null,\n      Ne = [];\n\n  function Fe(t, e) {\n    if (this._options = 0, this._processor = null, this._layoutQueue = [], this._layouts = {}, this._layoutCallbacks = {}, this._layoutWorkers = {}, this._layoutWorkerData = {}, this._workers = [], this._onWorkerMessage = this._onWorkerMessage.bind(this), this.setOptions(e), (t = \"number\" == typeof t ? Math.max(0, t) : 0) && window.Worker && window.URL && window.Blob) try {\n      this._workers = function (t, e) {\n        var i = [];\n\n        if (t > 0) {\n          Be || (Be = URL.createObjectURL(new Blob([\"(\" + Ge.toString() + \")(true)\"], {\n            type: \"application/javascript\"\n          })));\n\n          for (var s, n = 0; n < t; n++) {\n            s = new Worker(Be), e && (s.onmessage = e), i.push(s), Ne.push(s);\n          }\n        }\n\n        return i;\n      }(t, this._onWorkerMessage);\n    } catch (t) {\n      this._processor = new We();\n    } else this._processor = new We();\n  }\n\n  Fe.prototype._sendToWorker = function () {\n    if (this._layoutQueue.length && this._workers.length) {\n      var t = this._layoutQueue.shift(),\n          e = this._workers.pop(),\n          i = this._layoutWorkerData[t];\n\n      delete this._layoutWorkerData[t], this._layoutWorkers[t] = e, e.postMessage(i.buffer, [i.buffer]);\n    }\n  }, Fe.prototype._onWorkerMessage = function (t) {\n    var e = new Float32Array(t.data),\n        i = e[0],\n        s = this._layouts[i],\n        n = this._layoutCallbacks[i],\n        o = this._layoutWorkers[i];\n    s && delete this._layouts[i], n && delete this._layoutCallbacks[i], o && delete this._layoutWorkers[i], s && n && (s.width = e[1], s.height = e[2], s.slots = e.subarray(4, e.length), this._finalizeLayout(s), n(s)), o && (this._workers.push(o), this._sendToWorker());\n  }, Fe.prototype._finalizeLayout = function (t) {\n    var e = t._grid,\n        i = 2 & t._settings,\n        s = \"border-box\" === e._boxSizing;\n    return delete t._grid, delete t._settings, t.styles = {}, i ? t.styles.width = (s ? t.width + e._borderLeft + e._borderRight : t.width) + \"px\" : t.styles.height = (s ? t.height + e._borderTop + e._borderBottom : t.height) + \"px\", t;\n  }, Fe.prototype.setOptions = function (t) {\n    var e, i, s, n, o;\n    t && (e = \"boolean\" == typeof t.fillGaps ? t.fillGaps ? 1 : 0 : 1 & this._options, i = \"boolean\" == typeof t.horizontal ? t.horizontal ? 2 : 0 : 2 & this._options, s = \"boolean\" == typeof t.alignRight ? t.alignRight ? 4 : 0 : 4 & this._options, n = \"boolean\" == typeof t.alignBottom ? t.alignBottom ? 8 : 0 : 8 & this._options, o = \"boolean\" == typeof t.rounding ? t.rounding ? 16 : 0 : 16 & this._options, this._options = e | i | s | n | o);\n  }, Fe.prototype.createLayout = function (t, e, i, s, n, o) {\n    if (this._layouts[e]) throw new Error(\"A layout with the provided id is currently being processed.\");\n    var r = 2 & this._options,\n        h = {\n      id: e,\n      items: i,\n      slots: null,\n      width: r ? 0 : s,\n      height: r ? n : 0,\n      _grid: t,\n      _settings: this._options\n    };\n    if (!i.length) return h.slots = [], this._finalizeLayout(h), void o(h);\n    if (this._processor) return h.slots = window.Float32Array ? new Float32Array(2 * i.length) : new Array(2 * i.length), this._processor.computeLayout(h, h._settings), this._finalizeLayout(h), void o(h);\n\n    var a,\n        _,\n        l,\n        d = new Float32Array(4 + 2 * i.length);\n\n    for (d[0] = e, d[1] = h.width, d[2] = h.height, d[3] = h._settings, a = 0, _ = 3; a < i.length; a++) {\n      l = i[a], d[++_] = l._width + l._marginLeft + l._marginRight, d[++_] = l._height + l._marginTop + l._marginBottom;\n    }\n\n    return this._layoutQueue.push(e), this._layouts[e] = h, this._layoutCallbacks[e] = o, this._layoutWorkerData[e] = d, this._sendToWorker(), this.cancelLayout.bind(this, e);\n  }, Fe.prototype.cancelLayout = function (t) {\n    if (this._layouts[t] && (delete this._layouts[t], delete this._layoutCallbacks[t], this._layoutWorkerData[t])) {\n      delete this._layoutWorkerData[t];\n\n      var e = this._layoutQueue.indexOf(t);\n\n      e > -1 && this._layoutQueue.splice(e, 1);\n    }\n  }, Fe.prototype.destroy = function () {\n    for (var t in this._layoutWorkers) {\n      this._workers.push(this._layoutWorkers[t]);\n    }\n\n    !function (t) {\n      for (var e, i, s = 0; s < t.length; s++) {\n        (e = t[s]).onmessage = null, e.onerror = null, e.onmessageerror = null, e.terminate(), (i = Ne.indexOf(e)) > -1 && Ne.splice(i, 1);\n      }\n\n      Be && !Ne.length && (URL.revokeObjectURL(Be), Be = null);\n    }(this._workers), this._workers.length = 0, this._layoutQueue.length = 0, this._layouts = {}, this._layoutCallbacks = {}, this._layoutWorkers = {}, this._layoutWorkerData = {};\n  };\n  var ze = 0;\n\n  function Ve(t, e) {\n    var i = ++ze,\n        s = 0,\n        n = 0,\n        o = !1,\n        _r = function r(e) {\n      o || (n && (s -= e - n), n = e, s > 0 ? function (t, e) {\n        it.add(0, et + t, e);\n      }(i, _r) : (s = n = 0, t()));\n    };\n\n    return function (h) {\n      if (!o) {\n        if (!(e <= 0)) return !0 === h ? (o = !0, s = n = 0, _r = void 0, void function (t) {\n          it.remove(0, et + t);\n        }(i)) : void (s <= 0 ? (s = e, _r(0)) : s = e);\n        !0 !== h && t();\n      }\n    };\n  }\n\n  function je(t) {\n    var e = Object.prototype.toString.call(t);\n    return \"[object HTMLCollection]\" === e || \"[object NodeList]\" === e;\n  }\n\n  var Qe = Object.prototype.toString;\n\n  function Ue(t) {\n    return \"object\" == typeof t && \"[object Object]\" === Qe.call(t);\n  }\n\n  function Ze() {}\n\n  var Je,\n      $e = \"number\",\n      Ke = \"string\",\n      ti = \"instant\",\n      ei = 0;\n\n  function ii(e, i) {\n    if (typeof e === Ke && (e = document.querySelector(e)), !(e.getRootNode ? e.getRootNode({\n      composed: !0\n    }) === document : document.body.contains(e)) || e === document.documentElement) throw new Error(\"Container element must be an existing DOM element.\");\n\n    var s = function (t, e) {\n      var i = si({}, t);\n      e && (i = si(i, e));\n      e && e.visibleStyles ? i.visibleStyles = e.visibleStyles : t && t.visibleStyles && (i.visibleStyles = t.visibleStyles);\n      e && e.hiddenStyles ? i.hiddenStyles = e.hiddenStyles : t && t.hiddenStyles && (i.hiddenStyles = t.hiddenStyles);\n      return i;\n    }(ii.defaultOptions, i);\n\n    s.visibleStyles = ni(s.visibleStyles), s.hiddenStyles = ni(s.hiddenStyles), dt(s.dragSort) || (s.dragSort = !!s.dragSort), this._id = Oe(), this._element = e, this._settings = s, this._isDestroyed = !1, this._items = [], this._layout = {\n      id: 0,\n      items: [],\n      slots: []\n    }, this._isLayoutFinished = !0, this._nextLayoutData = null, this._emitter = new S(), this._onLayoutDataReceived = this._onLayoutDataReceived.bind(this), t[this._id] = this, Ot(e, s.containerClass), function (t, e) {\n      typeof e !== $e && (e = !0 === e ? 0 : -1);\n      e >= 0 && (t._resizeHandler = Ve(function () {\n        t.refreshItems().layout();\n      }, e), window.addEventListener(\"resize\", t._resizeHandler));\n    }(this, s.layoutOnResize), this.add(function (t, e) {\n      if (\"*\" === e) return t.children;\n\n      if (typeof e === Ke) {\n        for (var i = [], s = t.children, n = 0; n < s.length; n++) {\n          qt(s[n], e) && i.push(s[n]);\n        }\n\n        return i;\n      }\n\n      if (Array.isArray(e) || je(e)) return e;\n      return [];\n    }(e, s.items), {\n      layout: !1\n    }), s.layoutOnInit && this.layout(!0);\n  }\n\n  function si(t, e) {\n    var i,\n        s,\n        n,\n        o = Object.keys(e),\n        r = o.length;\n\n    for (n = 0; n < r; n++) {\n      i = Ue(e[s = o[n]]), Ue(t[s]) && i ? t[s] = si(si({}, t[s]), e[s]) : i ? t[s] = si({}, e[s]) : Array.isArray(e[s]) ? t[s] = e[s].slice(0) : t[s] = e[s];\n    }\n\n    return t;\n  }\n\n  function ni(t) {\n    var e,\n        i,\n        s = {},\n        n = document.documentElement.style;\n\n    for (e in t) {\n      t[e] && (i = E(n, e)) && (s[i] = t[e]);\n    }\n\n    return s;\n  }\n\n  function oi(t) {\n    for (var e = {}, i = 0; i < t.length; i++) {\n      e[t[i]._id] = i;\n    }\n\n    return e;\n  }\n\n  function ri(t, e, i) {\n    return t[e._id] - t[i._id];\n  }\n\n  return ii.Item = He, ii.ItemLayout = Pe, ii.ItemVisibility = Ye, ii.ItemMigrate = Xe, ii.ItemDrag = ye, ii.ItemDragRelease = Me, ii.ItemDragPlaceholder = Ce, ii.Emitter = S, ii.Animator = Le, ii.Dragger = X, ii.Packer = Fe, ii.AutoScroller = Pt, ii.defaultPacker = new Fe(2), ii.defaultOptions = {\n    items: \"*\",\n    showDuration: 300,\n    showEasing: \"ease\",\n    hideDuration: 300,\n    hideEasing: \"ease\",\n    visibleStyles: {\n      opacity: \"1\",\n      transform: \"scale(1)\"\n    },\n    hiddenStyles: {\n      opacity: \"0\",\n      transform: \"scale(0.5)\"\n    },\n    layout: {\n      fillGaps: !1,\n      horizontal: !1,\n      alignRight: !1,\n      alignBottom: !1,\n      rounding: !1\n    },\n    layoutOnResize: 150,\n    layoutOnInit: !0,\n    layoutDuration: 300,\n    layoutEasing: \"ease\",\n    sortData: null,\n    dragEnabled: !1,\n    dragContainer: null,\n    dragHandle: null,\n    dragStartPredicate: {\n      distance: 0,\n      delay: 0\n    },\n    dragAxis: \"xy\",\n    dragSort: !0,\n    dragSortHeuristics: {\n      sortInterval: 100,\n      minDragDistance: 10,\n      minBounceBackAngle: 1\n    },\n    dragSortPredicate: {\n      threshold: 50,\n      action: s,\n      migrateAction: s\n    },\n    dragRelease: {\n      duration: 300,\n      easing: \"ease\",\n      useDragContainer: !0\n    },\n    dragCssProps: {\n      touchAction: \"none\",\n      userSelect: \"none\",\n      userDrag: \"none\",\n      tapHighlightColor: \"rgba(0, 0, 0, 0)\",\n      touchCallout: \"none\",\n      contentZooming: \"none\"\n    },\n    dragPlaceholder: {\n      enabled: !1,\n      createElement: null,\n      onCreate: null,\n      onRemove: null\n    },\n    dragAutoScroll: {\n      targets: [],\n      handle: null,\n      threshold: 50,\n      safeZone: .2,\n      speed: Pt.smoothSpeed(1e3, 2e3, 2500),\n      sortDuringScroll: !0,\n      smoothStop: !1,\n      onStart: null,\n      onStop: null\n    },\n    containerClass: \"muuri\",\n    itemClass: \"muuri-item\",\n    itemVisibleClass: \"muuri-item-shown\",\n    itemHiddenClass: \"muuri-item-hidden\",\n    itemPositioningClass: \"muuri-item-positioning\",\n    itemDraggingClass: \"muuri-item-dragging\",\n    itemReleasingClass: \"muuri-item-releasing\",\n    itemPlaceholderClass: \"muuri-item-placeholder\"\n  }, ii.prototype.on = function (t, e) {\n    return this._emitter.on(t, e), this;\n  }, ii.prototype.off = function (t, e) {\n    return this._emitter.off(t, e), this;\n  }, ii.prototype.getElement = function () {\n    return this._element;\n  }, ii.prototype.getItem = function (t) {\n    if (this._isDestroyed || !t && 0 !== t) return null;\n    if (typeof t === $e) return this._items[t > -1 ? t : this._items.length + t] || null;\n    if (t instanceof He) return t._gridId === this._id ? t : null;\n\n    if (e) {\n      var i = e.get(t);\n      return i && i._gridId === this._id ? i : null;\n    }\n\n    for (var s = 0; s < this._items.length; s++) {\n      if (this._items[s]._element === t) return this._items[s];\n    }\n\n    return null;\n  }, ii.prototype.getItems = function (t) {\n    if (this._isDestroyed || void 0 === t) return this._items.slice(0);\n    var e,\n        i,\n        s = [];\n    if (Array.isArray(t) || je(t)) for (e = 0; e < t.length; e++) {\n      (i = this.getItem(t[e])) && s.push(i);\n    } else (i = this.getItem(t)) && s.push(i);\n    return s;\n  }, ii.prototype.refreshItems = function (t, e) {\n    if (this._isDestroyed) return this;\n    var i,\n        s,\n        n,\n        o,\n        r = t || this._items;\n    if (!0 === e) for (o = [], i = 0; i < r.length; i++) {\n      (s = r[i]).isVisible() || s.isHiding() || ((n = s.getElement().style).visibility = \"hidden\", n.display = \"\", o.push(n));\n    }\n\n    for (i = 0; i < r.length; i++) {\n      r[i]._refreshDimensions(e);\n    }\n\n    if (!0 === e) {\n      for (i = 0; i < o.length; i++) {\n        (n = o[i]).visibility = \"\", n.display = \"none\";\n      }\n\n      o.length = 0;\n    }\n\n    return this;\n  }, ii.prototype.refreshSortData = function (t) {\n    if (this._isDestroyed) return this;\n\n    for (var e = t || this._items, i = 0; i < e.length; i++) {\n      e[i]._refreshSortData();\n    }\n\n    return this;\n  }, ii.prototype.synchronize = function () {\n    if (this._isDestroyed) return this;\n    var t,\n        e,\n        i = this._items;\n    if (!i.length) return this;\n\n    for (var s = 0; s < i.length; s++) {\n      (e = i[s]._element).parentNode === this._element && (t = t || document.createDocumentFragment()).appendChild(e);\n    }\n\n    return t ? (this._element.appendChild(t), this._emit(\"synchronize\"), this) : this;\n  }, ii.prototype.layout = function (t, e) {\n    if (this._isDestroyed) return this;\n    var i = this._nextLayoutData;\n    i && dt(i.cancel) && i.cancel();\n    var s = ei = ei % 16777216 + 1;\n    this._nextLayoutData = {\n      id: s,\n      instant: t,\n      onFinish: e,\n      cancel: null\n    };\n\n    for (var n = this._items, o = [], r = 0; r < n.length; r++) {\n      n[r]._isActive && o.push(n[r]);\n    }\n\n    this._refreshDimensions();\n\n    var h,\n        a = this._width - this._borderLeft - this._borderRight,\n        _ = this._height - this._borderTop - this._borderBottom,\n        l = this._settings.layout;\n\n    return dt(l) ? h = l(this, s, o, a, _, this._onLayoutDataReceived) : (ii.defaultPacker.setOptions(l), h = ii.defaultPacker.createLayout(this, s, o, a, _, this._onLayoutDataReceived)), dt(h) && this._nextLayoutData && this._nextLayoutData.id === s && (this._nextLayoutData.cancel = h), this;\n  }, ii.prototype.add = function (t, e) {\n    if (this._isDestroyed || !t) return [];\n    var i,\n        s = je(i = t) ? Array.prototype.slice.call(i) : Array.prototype.concat(i);\n    if (!s.length) return s;\n\n    var n,\n        o,\n        r,\n        h,\n        a = e || {},\n        _ = a.layout ? a.layout : void 0 === a.layout,\n        l = this._items,\n        d = !1;\n\n    for (h = 0; h < s.length; h++) {\n      (o = s[h]).parentNode !== this._element && (n = n || document.createDocumentFragment()).appendChild(o);\n    }\n\n    for (n && this._element.appendChild(n), h = 0; h < s.length; h++) {\n      o = s[h], (r = s[h] = new He(this, o, a.active))._isActive && (d = !0, r._layout._skipNextAnimation = !0);\n    }\n\n    for (h = 0; h < s.length; h++) {\n      (r = s[h])._refreshDimensions(), r._refreshSortData();\n    }\n\n    return Gt(l, s, a.index), this._hasListeners(\"add\") && this._emit(\"add\", s.slice(0)), d && _ && this.layout(_ === ti, dt(_) ? _ : void 0), s;\n  }, ii.prototype.remove = function (t, e) {\n    if (this._isDestroyed || !t.length) return [];\n\n    var i,\n        s,\n        n,\n        o = e || {},\n        r = o.layout ? o.layout : void 0 === o.layout,\n        a = !1,\n        _ = this.getItems(),\n        l = [],\n        d = [];\n\n    for (n = 0; n < t.length; n++) {\n      (s = t[n])._isDestroyed || -1 !== (i = this._items.indexOf(s)) && (s._isActive && (a = !0), l.push(s), d.push(_.indexOf(s)), s._destroy(o.removeElements), this._items.splice(i, 1));\n    }\n\n    return this._hasListeners(h) && this._emit(h, l.slice(0), d), a && r && this.layout(r === ti, dt(r) ? r : void 0), l;\n  }, ii.prototype.show = function (t, e) {\n    return !this._isDestroyed && t.length && this._setItemsVisibility(t, !0, e), this;\n  }, ii.prototype.hide = function (t, e) {\n    return !this._isDestroyed && t.length && this._setItemsVisibility(t, !1, e), this;\n  }, ii.prototype.filter = function (t, e) {\n    if (this._isDestroyed || !this._items.length) return this;\n    var i,\n        s,\n        n = [],\n        o = [],\n        r = typeof t === Ke,\n        h = dt(t),\n        a = e || {},\n        l = !0 === a.instant,\n        d = a.syncWithLayout,\n        u = a.layout ? a.layout : void 0 === a.layout,\n        c = dt(a.onFinish) ? a.onFinish : null,\n        f = -1,\n        p = Ze;\n    if (c && (p = function p() {\n      ++f && c(n.slice(0), o.slice(0));\n    }), h || r) for (s = 0; s < this._items.length; s++) {\n      i = this._items[s], (h ? t(i) : qt(i._element, t)) ? n.push(i) : o.push(i);\n    }\n    return n.length ? this.show(n, {\n      instant: l,\n      syncWithLayout: d,\n      onFinish: p,\n      layout: !1\n    }) : p(), o.length ? this.hide(o, {\n      instant: l,\n      syncWithLayout: d,\n      onFinish: p,\n      layout: !1\n    }) : p(), (n.length || o.length) && (this._hasListeners(_) && this._emit(_, n.slice(0), o.slice(0)), u && this.layout(u === ti, dt(u) ? u : void 0)), this;\n  }, ii.prototype.sort = function () {\n    var t, e, i, s;\n\n    function n(n, o) {\n      for (var r, h, a, _, l = 0, d = 0; d < t.length; d++) {\n        if (r = t[d][0], h = t[d][1], a = (n._sortData ? n : n._refreshSortData())._sortData[r], _ = (o._sortData ? o : o._refreshSortData())._sortData[r], l = \"desc\" === h || !h && e ? _ < a ? -1 : _ > a ? 1 : 0 : a < _ ? -1 : a > _ ? 1 : 0) return l;\n      }\n\n      return l || (s || (s = oi(i)), l = e ? ri(s, o, n) : ri(s, n, o)), l;\n    }\n\n    function o(n, o) {\n      var r = e ? -t(n, o) : t(n, o);\n      return r || (s || (s = oi(i)), r = e ? ri(s, o, n) : ri(s, n, o)), r;\n    }\n\n    return function (r, h) {\n      if (this._isDestroyed || this._items.length < 2) return this;\n\n      var a = this._items,\n          _ = h || {},\n          d = _.layout ? _.layout : void 0 === _.layout;\n\n      if (e = !!_.descending, i = a.slice(0), s = null, dt(r)) t = r, a.sort(o);else if (typeof r === Ke) t = r.trim().split(\" \").filter(function (t) {\n        return t;\n      }).map(function (t) {\n        return t.split(\":\");\n      }), a.sort(n);else {\n        if (!Array.isArray(r)) throw t = e = i = s = null, new Error(\"Invalid comparer argument provided.\");\n        a.length = 0, a.push.apply(a, r);\n      }\n      return this._hasListeners(l) && this._emit(l, a.slice(0), i), d && this.layout(d === ti, dt(d) ? d : void 0), t = e = i = s = null, this;\n    };\n  }(), ii.prototype.move = function (t, e, n) {\n    if (this._isDestroyed || this._items.length < 2) return this;\n\n    var o,\n        r,\n        h = this._items,\n        a = n || {},\n        _ = a.layout ? a.layout : void 0 === a.layout,\n        l = a.action === i,\n        u = l ? i : s,\n        c = this.getItem(t),\n        f = this.getItem(e);\n\n    return c && f && c !== f && (o = h.indexOf(c), r = h.indexOf(f), l ? Nt(h, o, r) : Bt(h, o, r), this._hasListeners(d) && this._emit(d, {\n      item: c,\n      fromIndex: o,\n      toIndex: r,\n      action: u\n    }), _ && this.layout(_ === ti, dt(_) ? _ : void 0)), this;\n  }, ii.prototype.send = function (t, e, i, s) {\n    if (this._isDestroyed || e._isDestroyed || this === e) return this;\n    if (!(t = this.getItem(t))) return this;\n    var n = s || {},\n        o = n.appendTo || document.body,\n        r = n.layoutSender ? n.layoutSender : void 0 === n.layoutSender,\n        h = n.layoutReceiver ? n.layoutReceiver : void 0 === n.layoutReceiver;\n    return t._migrate.start(e, i, o), t._migrate._isActive && t._isActive && (r && this.layout(r === ti, dt(r) ? r : void 0), h && e.layout(h === ti, dt(h) ? h : void 0)), this;\n  }, ii.prototype.destroy = function (e) {\n    if (this._isDestroyed) return this;\n\n    var i,\n        s,\n        n,\n        o = this._element,\n        r = this._items.slice(0),\n        h = this._layout && this._layout.styles || {};\n\n    for ((n = this)._resizeHandler && (n._resizeHandler(!0), window.removeEventListener(\"resize\", n._resizeHandler), n._resizeHandler = null), i = 0; i < r.length; i++) {\n      r[i]._destroy(e);\n    }\n\n    for (s in this._items.length = 0, ue(o, this._settings.containerClass), h) {\n      o.style[s] = \"\";\n    }\n\n    return this._emit(\"destroy\"), this._emitter.destroy(), delete t[this._id], this._isDestroyed = !0, this;\n  }, ii.prototype._emit = function () {\n    this._isDestroyed || this._emitter.emit.apply(this._emitter, arguments);\n  }, ii.prototype._hasListeners = function (t) {\n    return !this._isDestroyed && this._emitter.countListeners(t) > 0;\n  }, ii.prototype._updateBoundingRect = function () {\n    var t = this._element.getBoundingClientRect();\n\n    this._width = t.width, this._height = t.height, this._left = t.left, this._top = t.top, this._right = t.right, this._bottom = t.bottom;\n  }, ii.prototype._updateBorders = function (t, e, i, s) {\n    var n = this._element;\n    t && (this._borderLeft = ft(n, \"border-left-width\")), e && (this._borderRight = ft(n, \"border-right-width\")), i && (this._borderTop = ft(n, \"border-top-width\")), s && (this._borderBottom = ft(n, \"border-bottom-width\"));\n  }, ii.prototype._refreshDimensions = function () {\n    this._updateBoundingRect(), this._updateBorders(1, 1, 1, 1), this._boxSizing = ct(this._element, \"box-sizing\");\n  }, ii.prototype._onLayoutDataReceived = (Je = [], function (t) {\n    if (!this._isDestroyed && this._nextLayoutData && this._nextLayoutData.id === t.id) {\n      var e,\n          i,\n          s,\n          h,\n          a = this,\n          _ = this._nextLayoutData.instant,\n          l = this._nextLayoutData.onFinish,\n          d = t.items.length,\n          u = d;\n\n      for (this._nextLayoutData = null, !this._isLayoutFinished && this._hasListeners(r) && this._emit(r, this._layout.items.slice(0)), this._layout = t, Je.length = 0, h = 0; h < d; h++) {\n        (e = t.items[h]) ? (i = t.slots[2 * h], s = t.slots[2 * h + 1], e._canSkipLayout(i, s) ? --u : (e._left = i, e._top = s, e.isActive() && !e.isDragging() ? Je.push(e) : --u)) : --u;\n      }\n\n      if (t.styles && Ae(this._element, t.styles), !this._hasListeners(n) || (this._emit(n, t.items.slice(0), !0 === _), this._layout.id === t.id)) {\n        var c = function c() {\n          if (!(--u > 0)) {\n            var e = a._layout.id !== t.id,\n                i = dt(_) ? _ : l;\n            e || (a._isLayoutFinished = !0), dt(i) && i(t.items.slice(0), e), !e && a._hasListeners(o) && a._emit(o, t.items.slice(0));\n          }\n        };\n\n        if (!Je.length) return c(), this;\n\n        for (this._isLayoutFinished = !1, h = 0; h < Je.length && this._layout.id === t.id; h++) {\n          Je[h]._layout.start(!0 === _, c);\n        }\n\n        return this._layout.id === t.id && (Je.length = 0), this;\n      }\n    }\n  }), ii.prototype._setItemsVisibility = function (t, e, i) {\n    var s,\n        o,\n        r = this,\n        h = t.slice(0),\n        _ = i || {},\n        l = !0 === _.instant,\n        d = _.onFinish,\n        u = _.layout ? _.layout : void 0 === _.layout,\n        c = h.length,\n        f = e ? \"showStart\" : a,\n        p = e ? \"showEnd\" : \"hideEnd\",\n        m = e ? \"show\" : \"hide\",\n        g = !1,\n        v = [],\n        y = [];\n\n    if (c) {\n      for (o = 0; o < h.length; o++) {\n        s = h[o], (e && !s._isActive || !e && s._isActive) && (g = !0), s._layout._skipNextAnimation = !(!e || s._isActive), e && s._visibility._isHidden && y.push(s), e ? s._addToLayout() : s._removeFromLayout();\n      }\n\n      y.length && (this.refreshItems(y, !0), y.length = 0), g && !1 !== _.syncWithLayout ? this.on(n, S) : S(), g && u && this.layout(u === ti, dt(u) ? u : void 0);\n    } else dt(d) && d(h);\n\n    function S() {\n      for (g && !1 !== _.syncWithLayout && r.off(n, S), r._hasListeners(f) && r._emit(f, h.slice(0)), o = 0; o < h.length; o++) {\n        h[o]._gridId === r._id ? h[o]._visibility[m](l, function (t, e) {\n          t || v.push(e), --c < 1 && (dt(d) && d(v.slice(0)), r._hasListeners(p) && r._emit(p, v.slice(0)));\n        }) : --c < 1 && (dt(d) && d(v.slice(0)), r._hasListeners(p) && r._emit(p, v.slice(0)));\n      }\n    }\n  }, ii;\n});\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/muuri.js\n");

/***/ })

}]);